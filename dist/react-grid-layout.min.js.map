{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///react-grid-layout.min.js","webpack:///webpack/bootstrap b501434341383da68e0b","webpack:///./index-dev.js","webpack:///external {\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\",\"root\":\"React\"}","webpack:///./lib/utils.js","webpack:///./lib/mixins/PureDeepRenderMixin.js","webpack:///./~/react/lib/ReactComponentWithPureRenderMixin.js","webpack:///./~/react/lib/cloneWithProps.js","webpack:///./lib/ReactGridLayout.jsx","webpack:///./lib/mixins/WidthListeningMixin.js","webpack:///./~/object-assign/index.js","webpack:///./~/react-draggable/index.js","webpack:///./~/react-resizable/build/Resizable.js","webpack:///./lib/GridItem.jsx","webpack:///./lib/ResponsiveReactGridLayout.jsx","webpack:///./lib/responsiveUtils.js","webpack:///./~/deep-equal/index.js","webpack:///./~/deep-equal/lib/is_arguments.js","webpack:///./~/deep-equal/lib/keys.js","webpack:///./~/react-draggable/lib/draggable.js","webpack:///./~/react-resizable/build/ResizableBox.js","webpack:///./~/react-resizable/index.js","webpack:///./~/react/lib/shallowEqual.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Responsive","assign","utils","bottom","layout","bottomY","max","i","len","length","y","h","clone","obj","collides","l1","l2","x","w","compact","verticalCompact","compareWith","getStatics","out","sorted","sortLayoutItemsByRowCol","l","compactItem","push","indexOf","moved","getFirstCollision","correctBounds","bounds","collidesWith","cols","getLayoutItem","layoutItem","getAllCollisions","moveElement","isUserAction","movingUp","undefined","reverse","collisions","collision","moveElementAwayFromCollision","itemToMove","fakeItem","Math","perc","num","setTransform","style","coords","replace","transform","WebkitTransform","MozTransform","msTransform","OTransform","concat","sort","a","b","synchronizeLayoutWithChildren","initialLayout","children","Array","isArray","child","exists","key","g","props","_grid","validateLayout","min","contextName","subProps","Error","j","deepEqual","PureDeepRenderMixin","shouldComponentUpdate","nextProps","nextState","state","shallowEqual","ReactComponentWithPureRenderMixin","mergeProps","currentProps","childProps","newProps","extend","hasOwn","RESERVED","resolve","fn","src","value","joinClasses","target","arguments","React","Object","prototype","hasOwnProperty","version","split","map","parseFloat","className","ref","MockLegacyFactory","constructor","ConvenienceConstructor","isReactLegacyFactory","type","createElement","_objectWithoutProperties","keys","_extends","source","GridItem","WidthListeningMixin","ReactGridLayout","createClass","displayName","mixins","propTypes","autoSize","PropTypes","bool","number","draggableCancel","string","draggableHandle","propName","componentName","layouts","margin","array","rowHeight","maxRows","isDraggable","isResizable","useCSSTransforms","onLayoutChange","func","onDragStart","onDrag","onDragStop","onResizeStart","onResize","onResizeStop","node","apply","Children","forEach","list","getDefaultProps","Infinity","getInitialState","activeDrag","isMounted","width","initialWidth","componentDidMount","setState","componentWillReceiveProps","onWidthChange","JSON","stringify","componentDidUpdate","prevProps","prevState","containerHeight","_ref","e","element","position","_ref2","oldL","placeholder","_ref3","_ref4","size","_ref5","_ref6","isPlaceholder","containerWidth","processGridItem","draggable","resizable","drag","moveOnStartChange","cancel","handle","usePercentages","render","_props","height","listenToWindowResize","window","addEventListener","onWindowResize","componentWillUnmount","removeEventListener","getDOMNode","offsetWidth","ToObject","val","TypeError","from","to","s","calcWH","handleSize","left","top","parseConstraints","constraints","Draggable","PureRenderMixin","cloneWithProps","isRequired","draggableOpts","object","minConstraints","maxConstraints","resizeHandler","handlerName","me","start","onStop","onStart","constraintError","name","Resizable","minW","maxW","minH","maxH","resizing","calcPosition","calcXY","round","floor","createStyle","pos","mixinDraggable","onDragHandler","mixinResizable","maxWidth","mins","maxes","onResizeHandler","_me$calcXY","_me$calcWH","join","responsiveUtils","ResponsiveReactGridLayout","breakpoint","breakpoints","k","onBreakpointChange","lg","md","sm","xs","xxs","getBreakpointFromWidth","getColsFromBreakpoint","findOrGenerateResponsiveLayout","newLayout","verticalLayout","newState","parse","sortBreakpoints","matching","breakpointName","lastBreakpoint","breakpointsSorted","breakpointsAbove","slice","isUndefinedOrNull","isBuffer","copy","objEquiv","opts","isArguments","pSlice","ka","objectKeys","kb","actual","expected","Date","getTime","strict","supported","toString","unsupported","propertyIsEnumerable","supportsArgumentsClass","shim","createUIEvent","_pendingState","clientY","clientX","canDragY","axis","canDragX","isFunction","findInArray","callback","matchesSelector","el","selector","method","positionToCSSTransform","getControlPosition","touches","addEvent","event","handler","attachEvent","removeEvent","detachEvent","emptyFunction","dragEventFor","eventsFor","touch","move","end","mouse","oneOf","grid","arrayOf","zIndex","onMouseDown","handleDrag","handleDragEnd","NaN","dragging","startX","startY","offsetX","offsetY","handleDragStart","button","dragPoint","parseInt","document","body","directionX","directionY","abs","isNaN","only","onTouchStart","ev","preventDefault","bind","onMouseUp","onTouchEnd","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","_s","_i","Symbol","iterator","next","done","err","lockAspectRatio","aspectRatio","widthChanged","heightChanged","_preserveAspectRatio","preserveAspectRatio","_preserveAspectRatio2","ResizableBox","objA","objB"],"mappings":"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","file":"react-grid-layout.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactGridLayout\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"ReactGridLayout\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactGridLayout\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"ReactGridLayout\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(6);\n\tmodule.exports.Responsive = __webpack_require__(12);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar assign = __webpack_require__(8);\n\t\n\tvar utils = module.exports = {\n\t\n\t  /**\n\t   * Return the bottom coordinate of the layout.\n\t   *\n\t   * @param  {Array} layout Layout array.\n\t   * @return {Number}       Bottom coordinate.\n\t   */\n\t  bottom: function bottom(layout) {\n\t    var max = 0,\n\t        bottomY;\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      bottomY = layout[i].y + layout[i].h;\n\t      if (bottomY > max) max = bottomY;\n\t    }\n\t    return max;\n\t  },\n\t\n\t  /**\n\t   * Clones a shallow object.\n\t   * @param  {Object} obj Object to clone.\n\t   * @return {Object}   Cloned object.\n\t   */\n\t  clone: function clone(obj) {\n\t    return assign({}, obj);\n\t  },\n\t\n\t  /**\n\t   * Given two layouts, check if they collide.\n\t   *\n\t   * @param  {Object} l1 Layout object.\n\t   * @param  {Object} l2 Layout object.\n\t   * @return {Boolean}   True if colliding.\n\t   */\n\t  collides: function collides(l1, l2) {\n\t    if (l1 === l2) return false; // same element\n\t    if (l1.x + l1.w <= l2.x) return false; // l1 is left of l2\n\t    if (l1.x >= l2.x + l2.w) return false; // l1 is right of l2\n\t    if (l1.y + l1.h <= l2.y) return false; // l1 is above l2\n\t    if (l1.y >= l2.y + l2.h) return false; // l1 is below l2\n\t    return true; // boxes overlap\n\t  },\n\t\n\t  /**\n\t   * Given a layout, compact it. This involves going down each y coordinate and removing gaps\n\t   * between items.\n\t   *\n\t   * @param  {Array} layout Layout.\n\t   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n\t   *   vertically.\n\t   * @return {Array}       Compacted Layout.\n\t   */\n\t  compact: function compact(layout, verticalCompact) {\n\t    // Statics go in the compareWith array right away so items flow around them.\n\t    var compareWith = utils.getStatics(layout),\n\t        out = [];\n\t    // We go through the items by row and column.\n\t    var sorted = utils.sortLayoutItemsByRowCol(layout);\n\t\n\t    for (var i = 0, len = sorted.length; i < len; i++) {\n\t      var l = sorted[i];\n\t\n\t      // Don't move static elements\n\t      if (!l['static']) {\n\t        l = utils.compactItem(compareWith, l, verticalCompact);\n\t\n\t        // Add to comparison array. We only collide with items before this one.\n\t        // Statics are already in this array.\n\t        compareWith.push(l);\n\t      }\n\t\n\t      // Add to output array to make sure they still come out in the right order.\n\t      out[layout.indexOf(l)] = l;\n\t\n\t      // Clear moved flag, if it exists.\n\t      delete l.moved;\n\t    }\n\t\n\t    return out;\n\t  },\n\t\n\t  compactItem: function compactItem(compareWith, l, verticalCompact) {\n\t    if (verticalCompact) {\n\t      // Move the element up as far as it can go without colliding.\n\t      while (l.y > 0 && !utils.getFirstCollision(compareWith, l)) {\n\t        l.y--;\n\t      }\n\t    }\n\t\n\t    // Move it down, and keep moving it down if it's colliding.\n\t    var collides;\n\t    while (collides = utils.getFirstCollision(compareWith, l)) {\n\t      l.y = collides.y + collides.h;\n\t    }\n\t    return l;\n\t  },\n\t\n\t  /**\n\t   * Given a layout, make sure all elements fit within its bounds.\n\t   *\n\t   * @param  {Array} layout Layout array.\n\t   * @param  {Number} bounds Number of columns.\n\t   * @return {[type]}        [description]\n\t   */\n\t  correctBounds: function correctBounds(layout, bounds) {\n\t    var collidesWith = utils.getStatics(layout);\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      var l = layout[i];\n\t      // Overflows right\n\t      if (l.x + l.w > bounds.cols) l.x = bounds.cols - l.w;\n\t      // Overflows left\n\t      if (l.x < 0) {\n\t        l.x = 0;\n\t        l.w = bounds.cols;\n\t      }\n\t      if (!l['static']) collidesWith.push(l);else {\n\t        // If this is static and collides with other statics, we must move it down.\n\t        // We have to do something nicer than just letting them overlap.\n\t        while (utils.getFirstCollision(collidesWith, l)) {\n\t          l.y++;\n\t        }\n\t      }\n\t    }\n\t    return layout;\n\t  },\n\t\n\t  /**\n\t   * Get a layout item by ID. Used so we can override later on if necessary.\n\t   *\n\t   * @param  {Array}  layout Layout array.\n\t   * @param  {Number} id     ID\n\t   * @return {LayoutItem}    Item at ID.\n\t   */\n\t  getLayoutItem: function getLayoutItem(layout, id) {\n\t    id = \"\" + id;\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (\"\" + layout[i].i === id) return layout[i];\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Returns the first item this layout collides with.\n\t   * It doesn't appear to matter which order we approach this from, although\n\t   * perhaps that is the wrong thing to do.\n\t   *\n\t   * @param  {Object} layoutItem Layout item.\n\t   * @return {Object|undefined}  A colliding layout item, or undefined.\n\t   */\n\t  getFirstCollision: function getFirstCollision(layout, layoutItem) {\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (utils.collides(layout[i], layoutItem)) return layout[i];\n\t    }\n\t  },\n\t\n\t  getAllCollisions: function getAllCollisions(layout, layoutItem) {\n\t    var out = [];\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (utils.collides(layout[i], layoutItem)) out.push(layout[i]);\n\t    }\n\t    return out;\n\t  },\n\t\n\t  /**\n\t   * Get all static elements.\n\t   * @param  {Array} layout Array of layout objects.\n\t   * @return {Array}        Array of static layout items..\n\t   */\n\t  getStatics: function getStatics(layout) {\n\t    var out = [];\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (layout[i]['static']) out.push(layout[i]);\n\t    }\n\t    return out;\n\t  },\n\t\n\t  /**\n\t   * Move an element. Responsible for doing cascading movements of other elements.\n\t   *\n\t   * @param  {Array}      layout Full layout to modify.\n\t   * @param  {LayoutItem} l      element to move.\n\t   * @param  {Number}     [x]    X position in grid units.\n\t   * @param  {Number}     [y]    Y position in grid units.\n\t   * @param  {Boolean}    [isUserAction] If true, designates that the item we're moving is\n\t   *                                     being dragged/resized by th euser.\n\t   */\n\t  moveElement: function moveElement(layout, l, x, y, isUserAction) {\n\t    if (l['static']) return layout;\n\t\n\t    // Short-circuit if nothing to do.\n\t    if (l.y === y && l.x === x) return layout;\n\t\n\t    var movingUp = l.y > y;\n\t    // This is quite a bit faster than extending the object\n\t    if (x !== undefined) l.x = x;\n\t    if (y !== undefined) l.y = y;\n\t    l.moved = true;\n\t\n\t    // If this collides with anything, move it.\n\t    // When doing this comparison, we have to sort the items we compare with\n\t    // to ensure, in the case of multiple collisions, that we're getting the\n\t    // nearest collision.\n\t    var sorted = utils.sortLayoutItemsByRowCol(layout);\n\t    if (movingUp) sorted = sorted.reverse();\n\t    var collisions = utils.getAllCollisions(sorted, l);\n\t\n\t    // Move each item that collides away from this element.\n\t    for (var i = 0, len = collisions.length; i < len; i++) {\n\t      var collision = collisions[i];\n\t      // console.log('resolving collision between', l.i, 'at', l.y, 'and', collision.i, 'at', collision.y);\n\t\n\t      // Short circuit so we can't infinite loop\n\t      if (collision.moved) continue;\n\t\n\t      // This makes it feel a bit more precise by waiting to swap for just a bit when moving up.\n\t      if (l.y > collision.y && l.y - collision.y > collision.h / 4) continue;\n\t\n\t      // Don't move static items - we have to move *this* element away\n\t      if (collision['static']) {\n\t        layout = utils.moveElementAwayFromCollision(layout, collision, l, isUserAction);\n\t      } else {\n\t        layout = utils.moveElementAwayFromCollision(layout, l, collision, isUserAction);\n\t      }\n\t    }\n\t\n\t    return layout;\n\t  },\n\t\n\t  /**\n\t   * This is where the magic needs to happen - given a collision, move an element away from the collision.\n\t   * We attempt to move it up if there's room, otherwise it goes below.\n\t   *\n\t   * @param  {Array} layout            Full layout to modify.\n\t   * @param  {LayoutItem} collidesWith Layout item we're colliding with.\n\t   * @param  {LayoutItem} itemToMove   Layout item we're moving.\n\t   * @param  {Boolean} [isUserAction]  If true, designates that the item we're moving is being dragged/resized\n\t   *                                   by the user.\n\t   */\n\t  moveElementAwayFromCollision: function moveElementAwayFromCollision(layout, collidesWith, itemToMove, isUserAction) {\n\t\n\t    // If there is enough space above the collision to put this element, move it there.\n\t    // We only do this on the main collision as this can get funky in cascades and cause\n\t    // unwanted swapping behavior.\n\t    if (isUserAction) {\n\t      // Make a mock item so we don't modify the item here, only modify in moveElement.\n\t      var fakeItem = {\n\t        x: itemToMove.x,\n\t        y: itemToMove.y,\n\t        w: itemToMove.w,\n\t        h: itemToMove.h\n\t      };\n\t      fakeItem.y = Math.max(collidesWith.y - itemToMove.h, 0);\n\t      if (!utils.getFirstCollision(layout, fakeItem)) {\n\t        return utils.moveElement(layout, itemToMove, undefined, fakeItem.y);\n\t      }\n\t    }\n\t\n\t    // Previously this was optimized to move below the collision directly, but this can cause problems\n\t    // with cascading moves, as an item may actually leapflog a collision and cause a reversal in order.\n\t    return utils.moveElement(layout, itemToMove, undefined, itemToMove.y + 1);\n\t  },\n\t\n\t  /**\n\t   * Helper to convert a number to a percentage string.\n\t   *\n\t   * @param  {Number} num Any number\n\t   * @return {String}     That number as a percentage.\n\t   */\n\t  perc: function perc(num) {\n\t    return num * 100 + '%';\n\t  },\n\t\n\t  setTransform: function setTransform(style, coords) {\n\t    // Replace unitless items with px\n\t    var x = ('' + coords[0]).replace(/(\\d)$/, '$1px');\n\t    var y = ('' + coords[1]).replace(/(\\d)$/, '$1px');\n\t    style.transform = \"translate(\" + x + \",\" + y + \")\";\n\t    style.WebkitTransform = \"translate(\" + x + \",\" + y + \")\";\n\t    style.MozTransform = \"translate(\" + x + \",\" + y + \")\";\n\t    style.msTransform = \"translate(\" + x + \",\" + y + \")\";\n\t    style.OTransform = \"translate(\" + x + \",\" + y + \")\";\n\t    return style;\n\t  },\n\t\n\t  /**\n\t   * Get layout items sorted from top left to right and down.\n\t   *\n\t   * @return {Array} Array of layout objects.\n\t   * @return {Array}        Layout, sorted static items first.\n\t   */\n\t  sortLayoutItemsByRowCol: function sortLayoutItemsByRowCol(layout) {\n\t    return [].concat(layout).sort(function (a, b) {\n\t      if (a.y > b.y || a.y === b.y && a.x > b.x) {\n\t        return 1;\n\t      }\n\t      return -1;\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Generate a layout using the initialLayout an children as a template.\n\t   * Missing entries will be added, extraneous ones will be truncated.\n\t   *\n\t   * @param  {Array}  initialLayout Layout passed in through props.\n\t   * @param  {String} breakpoint    Current responsive breakpoint.\n\t   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n\t   *   vertically.\n\t   * @return {Array}                Working layout.\n\t   */\n\t  synchronizeLayoutWithChildren: function synchronizeLayoutWithChildren(initialLayout, children, cols, verticalCompact) {\n\t    // ensure 'children' is always an array\n\t    if (!Array.isArray(children)) {\n\t      children = [children];\n\t    }\n\t    initialLayout = initialLayout || [];\n\t\n\t    // Generate one layout item per child.\n\t    var layout = [];\n\t    for (var i = 0, len = children.length; i < len; i++) {\n\t      var child = children[i];\n\t      // Don't overwrite if it already exists.\n\t      var exists = utils.getLayoutItem(initialLayout, child.key);\n\t      if (exists) {\n\t        // Ensure 'i' is always a string\n\t        exists.i = '' + exists.i;\n\t        layout.push(exists);\n\t        continue;\n\t      }\n\t      // New item: attempt to use a layout item from the child, if it exists.\n\t      var g = child.props._grid;\n\t      if (g) {\n\t        utils.validateLayout([g], 'ReactGridLayout.child');\n\t        // Validated; add it to the layout. Bottom 'y' possible is the bottom of the layout.\n\t        // This allows you to do nice stuff like specify {y: Infinity}\n\t        if (verticalCompact) {\n\t          layout.push(assign({}, g, { y: Math.min(utils.bottom(layout), g.y), i: child.key }));\n\t        } else {\n\t          layout.push(assign({}, g, { y: g.y, i: child.key }));\n\t        }\n\t      } else {\n\t        // Nothing provided: ensure this is added to the bottom\n\t        layout.push({ w: 1, h: 1, x: 0, y: utils.bottom(layout), i: child.key });\n\t      }\n\t    }\n\t\n\t    // Correct the layout.\n\t    layout = utils.correctBounds(layout, { cols: cols });\n\t    layout = utils.compact(layout, verticalCompact);\n\t\n\t    return layout;\n\t  },\n\t\n\t  /**\n\t   * Validate a layout. Throws errors.\n\t   *\n\t   * @param  {Array}  layout        Array of layout items.\n\t   * @param  {String} [contextName] Context name for errors.\n\t   * @throw  {Error}                Validation error.\n\t   */\n\t  validateLayout: function validateLayout(layout, contextName) {\n\t    contextName = contextName || \"Layout\";\n\t    var subProps = ['x', 'y', 'w', 'h'];\n\t    if (!Array.isArray(layout)) throw new Error(contextName + \" must be an array!\");\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      for (var j = 0; j < subProps.length; j++) {\n\t        if (typeof layout[i][subProps[j]] !== 'number') {\n\t          throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].' + subProps[j] + ' must be a Number!');\n\t        }\n\t      }\n\t      if (layout[i]['static'] !== undefined && typeof layout[i]['static'] !== 'boolean') {\n\t        throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].static must be a Boolean!');\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar deepEqual = __webpack_require__(14);\n\t\n\t// Like PureRenderMixin, but with deep comparisons.\n\tvar PureDeepRenderMixin = {\n\t  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {\n\t    return !deepEqual(this.props, nextProps) || !deepEqual(this.state, nextState);\n\t  }\n\t};\n\t\n\tmodule.exports = PureDeepRenderMixin;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t* @providesModule ReactComponentWithPureRenderMixin\n\t*/\n\t\n\t'use strict';\n\t\n\tvar shallowEqual = __webpack_require__(20);\n\t\n\t/**\n\t * If your React component's render function is \"pure\", e.g. it will render the\n\t * same result given the same props and state, provide this Mixin for a\n\t * considerable performance boost.\n\t *\n\t * Most React components have pure render functions.\n\t *\n\t * Example:\n\t *\n\t *   var ReactComponentWithPureRenderMixin =\n\t *     require('ReactComponentWithPureRenderMixin');\n\t *   React.createClass({\n\t *     mixins: [ReactComponentWithPureRenderMixin],\n\t *\n\t *     render: function() {\n\t *       return <div className={this.props.className}>foo</div>;\n\t *     }\n\t *   });\n\t *\n\t * Note: This only checks shallow equality for props and state. If these contain\n\t * complex data structures this mixin may have false-negatives for deeper\n\t * differences. Only mixin to components which have simple props and state, or\n\t * use `forceUpdate()` when you know deep data structures have changed.\n\t */\n\tvar ReactComponentWithPureRenderMixin = {\n\t  shouldComponentUpdate: function(nextProps, nextState) {\n\t    return !shallowEqual(this.props, nextProps) ||\n\t           !shallowEqual(this.state, nextState);\n\t  }\n\t};\n\t\n\tmodule.exports = ReactComponentWithPureRenderMixin;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\r\n\tvar React    = __webpack_require__(1)\r\n\t  , hasOwn   = Object.prototype.hasOwnProperty\r\n\t  , version  = React.version.split('.').map(parseFloat)\r\n\t  , RESERVED = {\r\n\t      className:  resolve(joinClasses),\r\n\t      children:   function(){},\r\n\t      key:        function(){},\r\n\t      ref:        function(){},\r\n\t      style:      resolve(extend)\r\n\t    };\r\n\t\r\n\tmodule.exports = function cloneWithProps(child, props) {\r\n\t  var newProps = mergeProps(props, child.props);\r\n\t\r\n\t  if (!hasOwn.call(newProps, 'children') && hasOwn.call(child.props, 'children'))\r\n\t    newProps.children = child.props.children;\r\n\t\r\n\t  // < 0.11\r\n\t  if (version[0] === 0 && version[1] < 11)\r\n\t    return child.constructor.ConvenienceConstructor(newProps);\r\n\t  \r\n\t  // 0.11\r\n\t  if (version[0] === 0 && version[1] === 11)\r\n\t    return child.constructor(newProps);\r\n\t\r\n\t  // 0.12\r\n\t  else if (version[0] === 0 && version[1] === 12){\r\n\t    MockLegacyFactory.isReactLegacyFactory = true\r\n\t    MockLegacyFactory.type = child.type\r\n\t    return React.createElement(MockLegacyFactory, newProps);\r\n\t  }\r\n\t\r\n\t  // 0.13+\r\n\t  return React.createElement(child.type, newProps);\r\n\t\r\n\t  function MockLegacyFactory(){}\r\n\t}\r\n\t\r\n\tfunction mergeProps(currentProps, childProps) {\r\n\t  var newProps = extend(currentProps), key\r\n\t\r\n\t  for (key in childProps) {\r\n\t    if (hasOwn.call(RESERVED, key) )\r\n\t      RESERVED[key](newProps, childProps[key], key)\r\n\t\r\n\t    else if ( !hasOwn.call(newProps, key) )\r\n\t      newProps[key] = childProps[key];\r\n\t  }\r\n\t  return newProps\r\n\t}\r\n\t\r\n\tfunction resolve(fn){\r\n\t  return function(src, value, key){\r\n\t    if( !hasOwn.call(src, key)) src[key] = value\r\n\t    else src[key] = fn(src[key], value)\r\n\t  }\r\n\t}\r\n\t\r\n\tfunction joinClasses(a, b){\r\n\t  if ( !a ) return b || ''\r\n\t  return a + (b ? ' ' + b : '')\r\n\t}\r\n\t\r\n\tfunction extend() {\r\n\t  var target = {};\r\n\t  for (var i = 0; i < arguments.length; i++) \r\n\t    for (var key in arguments[i]) if (hasOwn.call(arguments[i], key)) \r\n\t      target[key] = arguments[i][key]   \r\n\t  return target\r\n\t}\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\t\n\tvar React = __webpack_require__(1);\n\tvar GridItem = __webpack_require__(11);\n\tvar utils = __webpack_require__(2);\n\tvar PureDeepRenderMixin = __webpack_require__(3);\n\tvar WidthListeningMixin = __webpack_require__(7);\n\t\n\t/**\n\t * A reactive, fluid grid layout with draggable, resizable components.\n\t */\n\tvar ReactGridLayout = React.createClass({\n\t  displayName: 'ReactGridLayout',\n\t\n\t  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\t\n\t  propTypes: {\n\t    //\n\t    // Basic props\n\t    //\n\t\n\t    // If true, the container height swells and contracts to fit contents\n\t    autoSize: React.PropTypes.bool,\n\t    // # of cols.\n\t    cols: React.PropTypes.number,\n\t\n\t    // A selector that will not be draggable.\n\t    draggableCancel: React.PropTypes.string,\n\t    // A selector for the draggable handler\n\t    draggableHandle: React.PropTypes.string,\n\t\n\t    // If true, the layout will compact vertically\n\t    verticalCompact: React.PropTypes.bool,\n\t\n\t    // layout is an array of object with the format:\n\t    // {x: Number, y: Number, w: Number, h: Number}\n\t    layout: function layout(props, propName, componentName) {\n\t      var layout = props.layout;\n\t      // I hope you're setting the _grid property on the grid items\n\t      if (layout === undefined) return;\n\t      utils.validateLayout(layout, 'layout');\n\t    },\n\t\n\t    layouts: function layouts(props, propName, componentName) {\n\t      if (props.layouts) {\n\t        throw new Error(\"ReactGridLayout does not use `layouts`: Use ReactGridLayout.Responsive.\");\n\t      }\n\t    },\n\t\n\t    // margin between items [x, y] in px\n\t    margin: React.PropTypes.array,\n\t    // Rows have a static height, but you can change this based on breakpoints if you like\n\t    rowHeight: React.PropTypes.number,\n\t    maxRows: React.PropTypes.number,\n\t\n\t    //\n\t    // Flags\n\t    //\n\t    isDraggable: React.PropTypes.bool,\n\t    isResizable: React.PropTypes.bool,\n\t    // Use CSS transforms instead of top/left\n\t    useCSSTransforms: React.PropTypes.bool,\n\t\n\t    //\n\t    // Callbacks\n\t    //\n\t\n\t    // Callback so you can save the layout.\n\t    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n\t    onLayoutChange: React.PropTypes.func,\n\t\n\t    // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e).\n\t    // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n\t    onDragStart: React.PropTypes.func,\n\t    // Calls on each drag movement.\n\t    onDrag: React.PropTypes.func,\n\t    // Calls when drag is complete.\n\t    onDragStop: React.PropTypes.func,\n\t    //Calls when resize starts.\n\t    onResizeStart: React.PropTypes.func,\n\t    // Calls when resize movement happens.\n\t    onResize: React.PropTypes.func,\n\t    // Calls when resize is complete.\n\t    onResizeStop: React.PropTypes.func,\n\t\n\t    //\n\t    // Other validations\n\t    //\n\t\n\t    // Children must not have duplicate keys.\n\t    children: function children(props, propName, componentName) {\n\t      React.PropTypes.node.apply(this, arguments);\n\t      var children = props[propName];\n\t\n\t      // Check children keys for duplicates. Throw if found.\n\t      var keys = {};\n\t      React.Children.forEach(children, function (child, i, list) {\n\t        if (keys[child.key]) {\n\t          throw new Error(\"Duplicate child key found! This will cause problems in ReactGridLayout.\");\n\t        }\n\t        keys[child.key] = true;\n\t      });\n\t    }\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      autoSize: true,\n\t      cols: 12,\n\t      rowHeight: 150,\n\t      layout: [],\n\t      margin: [10, 10],\n\t      isDraggable: true,\n\t      isResizable: true,\n\t      useCSSTransforms: true,\n\t      verticalCompact: true,\n\t      maxRows: Infinity,\n\t      onLayoutChange: function onLayoutChange() {},\n\t      onDragStart: function onDragStart() {},\n\t      onDrag: function onDrag() {},\n\t      onDragStop: function onDragStop() {},\n\t      onResizeStart: function onResizeStart() {},\n\t      onResize: function onResize() {},\n\t      onResizeStop: function onResizeStop() {}\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      activeDrag: null,\n\t      isMounted: false,\n\t      layout: utils.synchronizeLayoutWithChildren(this.props.layout, this.props.children, this.props.cols, this.props.verticalCompact),\n\t      width: this.props.initialWidth\n\t    };\n\t  },\n\t\n\t  componentDidMount: function componentDidMount() {\n\t    // Call back with layout on mount. This should be done after correcting the layout width\n\t    // to ensure we don't rerender with the wrong width.\n\t    this.props.onLayoutChange(this.state.layout);\n\t    this.setState({ isMounted: true });\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t    // This allows you to set the width manually if you like.\n\t    // Use manual width changes in combination with `listenToWindowResize: false`\n\t    if (nextProps.width !== this.props.width) this.onWidthChange(nextProps.width);\n\t\n\t    // If children change, regenerate the layout.\n\t    if (nextProps.children.length !== this.props.children.length) {\n\t      this.setState({\n\t        layout: utils.synchronizeLayoutWithChildren(this.state.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n\t      });\n\t    }\n\t\n\t    // Allow parent to set layout directly.\n\t    if (nextProps.layout && JSON.stringify(nextProps.layout) !== JSON.stringify(this.state.layout)) {\n\t      this.setState({\n\t        layout: utils.synchronizeLayoutWithChildren(nextProps.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n\t      });\n\t    }\n\t  },\n\t\n\t  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {\n\t    // Call back so we can store the layout\n\t    // Do it only when a resize/drag is not active, otherwise there are way too many callbacks\n\t    if (this.state.layout !== prevState.layout && !this.state.activeDrag) {\n\t      this.props.onLayoutChange(this.state.layout, this.state.layouts);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Calculates a pixel value for the container.\n\t   * @return {String} Container height in pixels.\n\t   */\n\t  containerHeight: function containerHeight() {\n\t    if (!this.props.autoSize) return;\n\t    return utils.bottom(this.state.layout) * this.props.rowHeight + this.props.margin[1] + 'px';\n\t  },\n\t\n\t  /**\n\t   * When the width changes, save it to state. This helps with left/width calculations.\n\t   */\n\t  onWidthChange: function onWidthChange(width) {\n\t    this.setState({ width: width });\n\t  },\n\t\n\t  /**\n\t   * When dragging starts\n\t   * @param {Number} i Index of the child\n\t   * @param {Number} x X position of the move\n\t   * @param {Number} y Y position of the move\n\t   * @param {Event} e The mousedown event\n\t   * @param {Element} element The current dragging DOM element\n\t   * @param {Object} position Drag information\n\t   */\n\t  onDragStart: function onDragStart(i, x, y, _ref) {\n\t    var e = _ref.e;\n\t    var element = _ref.element;\n\t    var position = _ref.position;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t\n\t    // No need to clone, `l` hasn't changed.\n\t    this.props.onDragStart(layout, l, l, null, e);\n\t  },\n\t  /**\n\t   * Each drag movement create a new dragelement and move the element to the dragged location\n\t   * @param {Number} i Index of the child\n\t   * @param {Number} x X position of the move\n\t   * @param {Number} y Y position of the move\n\t   * @param {Event} e The mousedown event\n\t   * @param {Element} element The current dragging DOM element\n\t   * @param {Object} position Drag information\n\t   */\n\t  onDrag: function onDrag(i, x, y, _ref2) {\n\t    var e = _ref2.e;\n\t    var element = _ref2.element;\n\t    var position = _ref2.position;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    // Clone layout item so we can pass it to the callback.\n\t    var oldL = utils.clone(l);\n\t\n\t    // Create placeholder (display only)\n\t    var placeholder = {\n\t      w: l.w, h: l.h, x: l.x, y: l.y, placeholder: true, i: i\n\t    };\n\t\n\t    // Move the element to the dragged location.\n\t    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\t\n\t    this.props.onDrag(layout, oldL, l, placeholder, e);\n\t\n\t    this.setState({\n\t      layout: utils.compact(layout, this.props.verticalCompact),\n\t      activeDrag: placeholder\n\t    });\n\t  },\n\t\n\t  /**\n\t   * When dragging stops, figure out which position the element is closest to and update its x and y.\n\t   * @param  {Number} i Index of the child.\n\t   * @param {Number} i Index of the child\n\t   * @param {Number} x X position of the move\n\t   * @param {Number} y Y position of the move\n\t   * @param {Event} e The mousedown event\n\t   * @param {Element} element The current dragging DOM element\n\t   * @param {Object} position Drag information\n\t   */\n\t  onDragStop: function onDragStop(i, x, y, _ref3) {\n\t    var e = _ref3.e;\n\t    var element = _ref3.element;\n\t    var position = _ref3.position;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = utils.clone(l);\n\t\n\t    // Move the element here\n\t    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\t\n\t    this.props.onDragStop(layout, oldL, l, null, e);\n\t\n\t    // Set state\n\t    this.setState({ layout: utils.compact(layout, this.props.verticalCompact), activeDrag: null });\n\t  },\n\t\n\t  onResizeStart: function onResizeStart(i, w, h, _ref4) {\n\t    var e = _ref4.e;\n\t    var element = _ref4.element;\n\t    var size = _ref4.size;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t\n\t    // No need to clone, item hasn't changed\n\t    this.props.onResizeStart(layout, l, l, null, e);\n\t  },\n\t\n\t  onResize: function onResize(i, w, h, _ref5) {\n\t    var e = _ref5.e;\n\t    var element = _ref5.element;\n\t    var size = _ref5.size;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = utils.clone(l);\n\t\n\t    // Set new width and height.\n\t    l.w = w;\n\t    l.h = h;\n\t\n\t    // Create placeholder element (display only)\n\t    var placeholder = {\n\t      w: w, h: h, x: l.x, y: l.y, placeholder: true, i: i\n\t    };\n\t\n\t    this.props.onResize(layout, oldL, l, placeholder, e);\n\t\n\t    // Re-compact the layout and set the drag placeholder.\n\t    this.setState({ layout: utils.compact(layout, this.props.verticalCompact), activeDrag: placeholder });\n\t  },\n\t\n\t  onResizeStop: function onResizeStop(i, x, y, _ref6) {\n\t    var e = _ref6.e;\n\t    var element = _ref6.element;\n\t    var size = _ref6.size;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = utils.clone(l);\n\t\n\t    this.props.onResizeStop(layout, oldL, l, null, e);\n\t\n\t    this.setState({ activeDrag: null, layout: utils.compact(layout, this.props.verticalCompact) });\n\t  },\n\t\n\t  /**\n\t   * Create a placeholder object.\n\t   * @return {Element} Placeholder div.\n\t   */\n\t  placeholder: function placeholder() {\n\t    if (!this.state.activeDrag) return '';\n\t\n\t    // {...this.state.activeDrag} is pretty slow, actually\n\t    return React.createElement(\n\t      GridItem,\n\t      {\n\t        w: this.state.activeDrag.w,\n\t        h: this.state.activeDrag.h,\n\t        x: this.state.activeDrag.x,\n\t        y: this.state.activeDrag.y,\n\t        i: this.state.activeDrag.i,\n\t        isPlaceholder: true,\n\t        className: 'react-grid-placeholder',\n\t        containerWidth: this.state.width,\n\t        maxRows: this.props.maxRows,\n\t        cols: this.props.cols,\n\t        margin: this.props.margin,\n\t        rowHeight: this.props.rowHeight,\n\t        isDraggable: false,\n\t        isResizable: false,\n\t        useCSSTransforms: this.props.useCSSTransforms\n\t      },\n\t      React.createElement('div', null)\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Given a grid item, set its style attributes & surround in a <Draggable>.\n\t   * @param  {Element} child React element.\n\t   * @param  {Number}  i     Index of element.\n\t   * @return {Element}       Element wrapped in draggable and properly placed.\n\t   */\n\t  processGridItem: function processGridItem(child) {\n\t    var i = child.key;\n\t    var l = utils.getLayoutItem(this.state.layout, i);\n\t\n\t    // watchStart property tells Draggable to react to changes in the start param\n\t    // Must be turned off on the item we're dragging as the changes in `activeDrag` cause rerenders\n\t    var drag = this.state.activeDrag;\n\t    var moveOnStartChange = drag && drag.i === i ? false : true;\n\t\n\t    // Parse 'static'. Any properties defined directly on the grid item will take precedence.\n\t    var draggable, resizable;\n\t    if (l['static'] || this.props.isDraggable === false) draggable = false;\n\t    if (l['static'] || this.props.isResizable === false) resizable = false;\n\t\n\t    return React.createElement(\n\t      GridItem,\n\t      _extends({\n\t        containerWidth: this.state.width,\n\t        cols: this.props.cols,\n\t        margin: this.props.margin,\n\t        rowHeight: this.props.rowHeight,\n\t        moveOnStartChange: moveOnStartChange,\n\t        cancel: this.props.draggableCancel,\n\t        handle: this.props.draggableHandle,\n\t        maxRows: this.props.maxRows,\n\t        onDragStop: this.onDragStop,\n\t        onDragStart: this.onDragStart,\n\t        onDrag: this.onDrag,\n\t        onResizeStart: this.onResizeStart,\n\t        onResize: this.onResize,\n\t        onResizeStop: this.onResizeStop,\n\t        isDraggable: draggable,\n\t        isResizable: resizable,\n\t        useCSSTransforms: this.props.useCSSTransforms && this.state.isMounted,\n\t        usePercentages: !this.state.isMounted\n\t      }, l),\n\t      child\n\t    );\n\t  },\n\t\n\t  render: function render() {\n\t    // Calculate classname\n\t    var _props = this.props;\n\t    var className = _props.className;\n\t\n\t    var props = _objectWithoutProperties(_props, ['className']);\n\t\n\t    className = 'react-grid-layout ' + (className || '');\n\t\n\t    return React.createElement(\n\t      'div',\n\t      _extends({}, props, { className: className, style: { height: this.containerHeight() } }),\n\t      React.Children.map(this.props.children, this.processGridItem),\n\t      this.placeholder()\n\t    );\n\t  }\n\t});\n\t\n\tmodule.exports = ReactGridLayout;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar React = __webpack_require__(1);\n\t\n\t/**\n\t * A simple mixin that provides facility for listening to container resizes.\n\t */\n\tvar WidthListeningMixin = {\n\t\n\t  propTypes: {\n\t    // This allows setting this on the server side\n\t    initialWidth: React.PropTypes.number,\n\t\n\t    // If false, you should supply width yourself. Good if you want to debounce resize events\n\t    // or reuse a handler from somewhere else.\n\t    listenToWindowResize: React.PropTypes.bool\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      initialWidth: 1280,\n\t      listenToWindowResize: true\n\t    };\n\t  },\n\t\n\t  componentDidMount: function componentDidMount() {\n\t    if (this.props.listenToWindowResize) {\n\t      window.addEventListener('resize', this.onWindowResize);\n\t      // This is intentional. Once to properly set the breakpoint and resize the elements,\n\t      // and again to compensate for any scrollbar that appeared because of the first step.\n\t      this.onWindowResize();\n\t      this.onWindowResize();\n\t    }\n\t  },\n\t\n\t  componentWillUnmount: function componentWillUnmount() {\n\t    window.removeEventListener('resize', this.onWindowResize);\n\t  },\n\t\n\t  /**\n\t   * On window resize, update width.\n\t   */\n\t  onWindowResize: function onWindowResize() {\n\t    this.onWidthChange(this.getDOMNode().offsetWidth);\n\t  }\n\t\n\t};\n\t\n\tmodule.exports = WidthListeningMixin;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction ToObject(val) {\n\t\tif (val == null) {\n\t\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t\t}\n\t\n\t\treturn Object(val);\n\t}\n\t\n\tmodule.exports = Object.assign || function (target, source) {\n\t\tvar from;\n\t\tvar keys;\n\t\tvar to = ToObject(target);\n\t\n\t\tfor (var s = 1; s < arguments.length; s++) {\n\t\t\tfrom = arguments[s];\n\t\t\tkeys = Object.keys(Object(from));\n\t\n\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\tto[keys[i]] = from[keys[i]];\n\t\t\t}\n\t\t}\n\t\n\t\treturn to;\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(17);\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar React = __webpack_require__(1);\n\tvar Draggable = __webpack_require__(9);\n\tvar PureRenderMixin = __webpack_require__(4);\n\tvar assign = __webpack_require__(8);\n\tvar cloneWithProps = __webpack_require__(5);\n\t\n\tvar Resizable = module.exports = React.createClass({\n\t  displayName: 'Resizable',\n\t  mixins: [PureRenderMixin],\n\t\n\t  propTypes: {\n\t    // Require that one and only one child be present.\n\t    children: React.PropTypes.element.isRequired,\n\t    // Functions\n\t    onResizeStop: React.PropTypes.func,\n\t    onResizeStart: React.PropTypes.func,\n\t    onResize: React.PropTypes.func,\n\t\n\t    width: React.PropTypes.number.isRequired,\n\t    height: React.PropTypes.number.isRequired,\n\t    // If you change this, be sure to update your css\n\t    handleSize: React.PropTypes.array,\n\t    // These will be passed wholesale to react-draggable\n\t    draggableOpts: React.PropTypes.object\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      handleSize: [20, 20]\n\t    };\n\t  },\n\t\n\t  minConstraints: function minConstraints() {\n\t    return parseConstraints(this.props.minConstraints, this.props.handleSize) || this.props.handleSize;\n\t  },\n\t\n\t  maxConstraints: function maxConstraints() {\n\t    return parseConstraints(this.props.maxConstraints, this.props.handleSize);\n\t  },\n\t\n\t  /**\n\t   * Wrapper around drag events to provide more useful data.\n\t   *\n\t   * @param  {String} handlerName Handler name to wrap.\n\t   * @return {Function}           Handler function.\n\t   */\n\t  resizeHandler: function resizeHandler(handlerName) {\n\t    var me = this;\n\t    return function (e, _ref) {\n\t      var element = _ref.element;\n\t      var position = _ref.position;\n\t\n\t      me.props[handlerName] && me.props[handlerName](e, { element: element, size: calcWH(position, me.props.handleSize) });\n\t    };\n\t  },\n\t\n\t  render: function render() {\n\t    var p = this.props;\n\t\n\t    // What we're doing here is getting the child of this element, and cloning it with this element's props.\n\t    // We are then defining its children as:\n\t    // Its original children (resizable's child's children), and\n\t    // A draggable handle.\n\t    return cloneWithProps(p.children, assign({}, p, {\n\t      children: [p.children.props.children, React.createElement(\n\t        Draggable,\n\t        _extends({}, p.draggableOpts, {\n\t          start: { x: p.width - 20, y: p.height - 20 },\n\t          moveOnStartChange: true,\n\t          onStop: this.resizeHandler('onResizeStop'),\n\t          onStart: this.resizeHandler('onResizeStart'),\n\t          onDrag: this.resizeHandler('onResize'),\n\t          minConstraints: this.minConstraints(),\n\t          maxConstraints: this.maxConstraints()\n\t        }),\n\t        React.createElement('span', { className: 'react-resizable-handle' })\n\t      )]\n\t    }));\n\t  }\n\t});\n\t\n\t/**\n\t * Parse left and top coordinates; we have to add the handle size to get the full picture.\n\t * @param  {Number} options.left Left coordinate.\n\t * @param  {Number} options.top  Top coordinate.\n\t * @param  {Array}  handleSize   Handle data.\n\t * @return {Object}              Coordinates\n\t */\n\tfunction calcWH(_ref2, handleSize) {\n\t  var left = _ref2.left;\n\t  var top = _ref2.top;\n\t\n\t  return { width: left + handleSize[0], height: top + handleSize[1] };\n\t}\n\t\n\t/**\n\t * Constraints must be subtracted by the size of the handle to work properly.\n\t * This has a side-effect of effectively limiting the minimum size to the handleSize,\n\t * which IMO is fine.\n\t * @param  {Array} constraints Constraints array.\n\t * @param  {Array} handleSize  Handle size array.\n\t * @return {Array}             Transformed constraints.\n\t */\n\tfunction parseConstraints(constraints, handleSize) {\n\t  if (!constraints) return;\n\t  return constraints.map(function (c, i) {\n\t    return c - handleSize[i];\n\t  });\n\t}\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar React = __webpack_require__(1);\n\tvar cloneWithProps = __webpack_require__(5);\n\tvar utils = __webpack_require__(2);\n\tvar Draggable = __webpack_require__(9);\n\tvar Resizable = __webpack_require__(19).Resizable;\n\tvar PureDeepRenderMixin = __webpack_require__(3);\n\t\n\t/**\n\t * An individual item within a ReactGridLayout.\n\t */\n\tvar GridItem = React.createClass({\n\t  displayName: 'GridItem',\n\t\n\t  mixins: [PureDeepRenderMixin],\n\t\n\t  propTypes: {\n\t    // Children must be only a single element\n\t    children: React.PropTypes.element,\n\t\n\t    // General grid attributes\n\t    cols: React.PropTypes.number.isRequired,\n\t    containerWidth: React.PropTypes.number.isRequired,\n\t    rowHeight: React.PropTypes.number.isRequired,\n\t    margin: React.PropTypes.array.isRequired,\n\t    maxRows: React.PropTypes.number.isRequired,\n\t\n\t    // These are all in grid units\n\t    x: React.PropTypes.number.isRequired,\n\t    y: React.PropTypes.number.isRequired,\n\t    w: React.PropTypes.number.isRequired,\n\t    h: React.PropTypes.number.isRequired,\n\t\n\t    // All optional\n\t    minW: function minW(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.minW > props.w || props.minW > props.maxW) constraintError('minW', props);\n\t    },\n\t    maxW: function maxW(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.maxW < props.w || props.maxW < props.minW) constraintError('maxW', props);\n\t    },\n\t    minH: function minH(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.minH > props.h || props.minH > props.maxH) constraintError('minH', props);\n\t    },\n\t    maxH: function maxH(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.maxH < props.h || props.maxH < props.minH) constraintError('maxH', props);\n\t    },\n\t\n\t    // ID is nice to have for callbacks\n\t    i: React.PropTypes.string.isRequired,\n\t\n\t    // If true, item will be repositioned when x/y/w/h change\n\t    moveOnStartChange: React.PropTypes.bool,\n\t\n\t    // Functions\n\t    onDragStop: React.PropTypes.func,\n\t    onDragStart: React.PropTypes.func,\n\t    onDrag: React.PropTypes.func,\n\t    onResizeStop: React.PropTypes.func,\n\t    onResizeStart: React.PropTypes.func,\n\t    onResize: React.PropTypes.func,\n\t\n\t    // Flags\n\t    isDraggable: React.PropTypes.bool,\n\t    isResizable: React.PropTypes.bool,\n\t    // Use CSS transforms instead of top/left\n\t    useCSSTransforms: React.PropTypes.bool,\n\t    isPlaceholder: React.PropTypes.bool,\n\t\n\t    // Others\n\t    className: React.PropTypes.string,\n\t    // Selector for draggable handle\n\t    handle: React.PropTypes.string,\n\t    // Selector for draggable cancel (see react-draggable)\n\t    cancel: React.PropTypes.string\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      isDraggable: true,\n\t      isResizable: true,\n\t      useCSSTransforms: true,\n\t      className: '',\n\t      cancel: '',\n\t      minH: 1,\n\t      minW: 1,\n\t      maxH: Infinity,\n\t      maxW: Infinity\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      resizing: false,\n\t      className: ''\n\t    };\n\t  },\n\t\n\t  /**\n\t   * Return position on the page given an x, y, w, h.\n\t   * left, top, width, height are all in pixels.\n\t   * @param  {Number}  x             X coordinate in grid units.\n\t   * @param  {Number}  y             Y coordinate in grid units.\n\t   * @param  {Number}  w             W coordinate in grid units.\n\t   * @param  {Number}  h             H coordinate in grid units.\n\t   * @return {Object}                Object containing coords.\n\t   */\n\t  calcPosition: function calcPosition(x, y, w, h) {\n\t    var p = this.props;\n\t    var width = p.containerWidth - p.margin[0];\n\t    var out = {\n\t      left: width * (x / p.cols) + p.margin[0],\n\t      top: p.rowHeight * y + p.margin[1],\n\t      width: width * (w / p.cols) - p.margin[0],\n\t      height: h * p.rowHeight - p.margin[1]\n\t    };\n\t    return out;\n\t  },\n\t\n\t  /**\n\t   * Translate x and y coordinates from pixels to grid units.\n\t   * @param  {Number} options.left  Left offset in pixels.\n\t   * @param  {Number} options.top   Top offset in pixels.\n\t   * @return {Object}               x and y in grid units.\n\t   */\n\t  calcXY: function calcXY(_ref) {\n\t    var left = _ref.left;\n\t    var top = _ref.top;\n\t\n\t    left = left - this.props.margin[0];\n\t    top = top - this.props.margin[1];\n\t    var maxRows = this.props.maxRows;\n\t    var h = this.props.h;\n\t    // This is intentional; because so much of the logic on moving boxes up/down relies\n\t    // on an exact y position, we only round the x, not the y.\n\t    var x = Math.round(left / this.props.containerWidth * this.props.cols);\n\t    var y = Math.floor(top / this.props.rowHeight);\n\t    x = Math.max(Math.min(x, this.props.cols), 0);\n\t    y = Math.max(Math.min(y, maxRows - h), 0);\n\t    return { x: x, y: y };\n\t  },\n\t\n\t  /**\n\t   * Given a height and width in pixel values, calculate grid units.\n\t   * @param  {Number} options.height Height in pixels.\n\t   * @param  {Number} options.width  Width in pixels.\n\t   * @return {Object}                w, h as grid units.\n\t   */\n\t  calcWH: function calcWH(_ref2) {\n\t    var height = _ref2.height;\n\t    var width = _ref2.width;\n\t\n\t    width = width + this.props.margin[0];\n\t    height = height + this.props.margin[1];\n\t    var maxRows = this.props.maxRows;\n\t    var y = this.props.y;\n\t    var w = Math.round(width / this.props.containerWidth * this.props.cols);\n\t    var h = Math.round(height / this.props.rowHeight);\n\t    w = Math.max(Math.min(w, this.props.cols - this.props.x), 0);\n\t    h = Math.max(Math.min(h, maxRows - y), 0);\n\t    return { w: w, h: h };\n\t  },\n\t\n\t  /**\n\t   * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it\n\t   * well when server rendering, and the only way to do that properly is to use percentage width/left because\n\t   * we don't know exactly what the browser viewport is.\n\t   * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage\n\t   * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.\n\t   *\n\t   * @param  {Object} pos Position object with width, height, left, top.\n\t   * @return {Object}     Style object.\n\t   */\n\t  createStyle: function createStyle(pos) {\n\t    var style = {\n\t      width: pos.width + 'px',\n\t      height: pos.height + 'px',\n\t      left: pos.left + 'px',\n\t      top: pos.top + 'px',\n\t      position: 'absolute'\n\t    };\n\t\n\t    // This is used for server rendering.\n\t    if (this.props.usePercentages) {\n\t      pos.left = utils.perc(pos.left / this.props.containerWidth);\n\t      style.left = pos.left;\n\t      style.width = utils.perc(pos.width / this.props.containerWidth);\n\t    }\n\t\n\t    // CSS Transforms support\n\t    if (this.props.useCSSTransforms) {\n\t      utils.setTransform(style, [pos.left, pos.top]);\n\t      delete style.left;\n\t      delete style.top;\n\t    }\n\t\n\t    return style;\n\t  },\n\t\n\t  /**\n\t   * Mix a Draggable instance into a child.\n\t   * @param  {Element} child    Child element.\n\t   * @param  {Object} position  Position object (pixel values)\n\t   * @return {Element}          Child wrapped in Draggable.\n\t   */\n\t  mixinDraggable: function mixinDraggable(child, position) {\n\t    return React.createElement(\n\t      Draggable,\n\t      {\n\t        start: { x: position.left, y: position.top },\n\t        moveOnStartChange: this.props.moveOnStartChange,\n\t        onStop: this.onDragHandler('onDragStop'),\n\t        onStart: this.onDragHandler('onDragStart'),\n\t        onDrag: this.onDragHandler('onDrag'),\n\t        handle: this.props.handle,\n\t        cancel: \".react-resizable-handle \" + this.props.cancel,\n\t        useCSSTransforms: this.props.useCSSTransforms\n\t      },\n\t      child\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Mix a Resizable instance into a child.\n\t   * @param  {Element} child    Child element.\n\t   * @param  {Object} position  Position object (pixel values)\n\t   * @return {Element}          Child wrapped in Resizable.\n\t   */\n\t  mixinResizable: function mixinResizable(child, position) {\n\t    var p = this.props;\n\t    // This is the max possible width - doesn't go to infinity because of the width of the window\n\t    var maxWidth = this.calcPosition(0, 0, p.cols - p.x, 0).width;\n\t\n\t    // Calculate min/max constraints using our min & maxes\n\t    var mins = this.calcPosition(0, 0, p.minW, p.minH);\n\t    var maxes = this.calcPosition(0, 0, p.maxW, p.maxH);\n\t    var minConstraints = [mins.width, mins.height];\n\t    var maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];\n\t    return React.createElement(\n\t      Resizable,\n\t      {\n\t        width: position.width,\n\t        height: position.height,\n\t        minConstraints: minConstraints,\n\t        maxConstraints: maxConstraints,\n\t        onResizeStop: this.onResizeHandler('onResizeStop'),\n\t        onResizeStart: this.onResizeHandler('onResizeStart'),\n\t        onResize: this.onResizeHandler('onResize')\n\t      },\n\t      child\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Wrapper around drag events to provide more useful data.\n\t   * All drag events call the function with the given handler name,\n\t   * with the signature (index, x, y).\n\t   *\n\t   * @param  {String} handlerName Handler name to wrap.\n\t   * @return {Function}           Handler function.\n\t   */\n\t  onDragHandler: function onDragHandler(handlerName) {\n\t    var me = this;\n\t    return function (e, _ref3) {\n\t      var element = _ref3.element;\n\t      var position = _ref3.position;\n\t\n\t      if (!me.props[handlerName]) return;\n\t      // Get new XY\n\t\n\t      var _me$calcXY = me.calcXY(position);\n\t\n\t      var x = _me$calcXY.x;\n\t      var y = _me$calcXY.y;\n\t\n\t      // Cap x at numCols\n\t      x = Math.min(x, me.props.cols - me.props.w);\n\t\n\t      me.props[handlerName](me.props.i, x, y, { e: e, element: element, position: position });\n\t    };\n\t  },\n\t\n\t  /**\n\t   * Wrapper around drag events to provide more useful data.\n\t   * All drag events call the function with the given handler name,\n\t   * with the signature (index, x, y).\n\t   *\n\t   * @param  {String} handlerName Handler name to wrap.\n\t   * @return {Function}           Handler function.\n\t   */\n\t  onResizeHandler: function onResizeHandler(handlerName) {\n\t    var me = this;\n\t    return function (e, _ref4) {\n\t      var element = _ref4.element;\n\t      var size = _ref4.size;\n\t\n\t      if (!me.props[handlerName]) return;\n\t\n\t      // Get new XY\n\t\n\t      var _me$calcWH = me.calcWH(size);\n\t\n\t      var w = _me$calcWH.w;\n\t      var h = _me$calcWH.h;\n\t\n\t      // Cap w at numCols\n\t      w = Math.min(w, me.props.cols - me.props.x);\n\t      // Ensure w is at least 1\n\t      w = Math.max(w, 1);\n\t\n\t      // Min/max capping\n\t      w = Math.max(Math.min(w, me.props.maxW), me.props.minW);\n\t      h = Math.max(Math.min(h, me.props.maxH), me.props.minH);\n\t\n\t      me.setState({ resizing: handlerName === 'onResizeStop' ? null : size });\n\t\n\t      me.props[handlerName](me.props.i, w, h, { e: e, element: element, size: size });\n\t    };\n\t  },\n\t\n\t  render: function render() {\n\t    var p = this.props,\n\t        pos = this.calcPosition(p.x, p.y, p.w, p.h);\n\t    if (this.state.resizing) {\n\t      pos.width = this.state.resizing.width;\n\t      pos.height = this.state.resizing.height;\n\t    }\n\t\n\t    // Create the child element. We clone the existing element but modify its className and style.\n\t    var child = cloneWithProps(this.props.children, {\n\t      // Munge a classname. Use passed in classnames and resizing.\n\t      // React with merge the classNames.\n\t      className: ['react-grid-item', this.props.className, this.state.resizing ? 'resizing' : '', this.props.useCSSTransforms ? 'cssTransforms' : ''].join(' '),\n\t      // We can set the width and height on the child, but unfortunately we can't set the position.\n\t      style: this.createStyle(pos)\n\t    });\n\t\n\t    // Resizable support. This is usually on but the user can toggle it off.\n\t    if (this.props.isResizable) {\n\t      child = this.mixinResizable(child, pos);\n\t    }\n\t\n\t    // Draggable support. This is always on, except for with placeholders.\n\t    if (this.props.isDraggable) {\n\t      child = this.mixinDraggable(child, pos);\n\t    }\n\t\n\t    return child;\n\t  }\n\t});\n\t\n\tfunction constraintError(name, props) {\n\t  delete props.children;\n\t  throw new Error(name + ' overrides contraints on gridItem ' + props.i + '. Full props: ' + JSON.stringify(props));\n\t}\n\t\n\tmodule.exports = GridItem;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\t\n\tvar React = __webpack_require__(1);\n\tvar utils = __webpack_require__(2);\n\tvar responsiveUtils = __webpack_require__(13);\n\tvar PureDeepRenderMixin = __webpack_require__(3);\n\tvar WidthListeningMixin = __webpack_require__(7);\n\tvar ReactGridLayout = __webpack_require__(6);\n\t\n\t/**\n\t * A wrapper around ReactGridLayout to support responsive breakpoints.\n\t */\n\tvar ResponsiveReactGridLayout = React.createClass({\n\t  displayName: 'ResponsiveReactGridLayout',\n\t\n\t  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\t\n\t  propTypes: {\n\t    //\n\t    // Basic props\n\t    //\n\t\n\t    // Optional, but if you are managing width yourself you may want to set the breakpoint\n\t    // yourself as well.\n\t    breakpoint: React.PropTypes.string,\n\t\n\t    // {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}\n\t    breakpoints: React.PropTypes.object,\n\t\n\t    // # of cols. This is a breakpoint -> cols map\n\t    cols: React.PropTypes.object,\n\t\n\t    // layouts is an object mapping breakpoints to layouts.\n\t    // e.g. {lg: Layout, md: Layout, ...}\n\t    layouts: function layouts(props, propName, componentName) {\n\t      React.PropTypes.object.isRequired.apply(this, arguments);\n\t\n\t      var layouts = props.layouts;\n\t      Object.keys(layouts).map(function (k) {\n\t        utils.validateLayout(layouts[k], 'layouts.' + k);\n\t      });\n\t    },\n\t\n\t    //\n\t    // Callbacks\n\t    //\n\t\n\t    // Calls back with breakpoint and new # cols\n\t    onBreakpointChange: React.PropTypes.func,\n\t\n\t    // Callback so you can save the layout.\n\t    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n\t    onLayoutChange: React.PropTypes.func\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },\n\t      cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n\t      layouts: {},\n\t      onBreakpointChange: function onBreakpointChange() {},\n\t      onLayoutChange: function onLayoutChange() {}\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    var breakpoint = this.props.breakpoint || responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, this.props.initialWidth);\n\t    var cols = responsiveUtils.getColsFromBreakpoint(breakpoint, this.props.cols);\n\t\n\t    // Get the initial layout. This can tricky; we try to generate one however possible if one doesn't exist\n\t    // for this layout.\n\t    var initialLayout = responsiveUtils.findOrGenerateResponsiveLayout(this.props.layouts, this.props.breakpoints, breakpoint, breakpoint, cols, this.props.verticalCompact);\n\t\n\t    return {\n\t      layout: initialLayout,\n\t      // storage for layouts obsoleted by breakpoints\n\t      layouts: this.props.layouts || {},\n\t      breakpoint: breakpoint,\n\t      cols: cols,\n\t      width: this.props.initialWidth\n\t    };\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t    // This allows you to set the width manually if you like.\n\t    // Use manual width changes in combination with `listenToWindowResize: false`\n\t    if (nextProps.width) this.onWidthChange(nextProps.width);\n\t\n\t    // Allow parent to set breakpoint directly.\n\t    if (nextProps.breakpoint !== this.props.breakpoint) {\n\t      this.onWidthChange(this.state.width);\n\t    }\n\t\n\t    // Allow parent to set layouts directly.\n\t    if (nextProps.layouts && nextProps.layouts !== this.state.layouts) {\n\t      // Since we're setting an entirely new layout object, we must generate a new responsive layout\n\t      // if one does not exist.\n\t      var newLayout = responsiveUtils.findOrGenerateResponsiveLayout(nextProps.layouts, nextProps.breakpoints, this.state.breakpoint, this.state.breakpoint, this.state.cols, this.props.verticalLayout);\n\t\n\t      this.setState({\n\t        layouts: nextProps.layouts,\n\t        layout: newLayout\n\t      });\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Bubble this up, add `layouts` object.\n\t   * @param  {Array} layout Layout from inner Grid.\n\t   */\n\t  onLayoutChange: function onLayoutChange(layout) {\n\t    this.state.layouts[this.state.breakpoint] = layout;\n\t    this.setState({ layout: layout, layouts: this.state.layouts });\n\t    this.props.onLayoutChange(layout, this.state.layouts);\n\t  },\n\t\n\t  /**\n\t   * When the width changes work through breakpoints and reset state with the new width & breakpoint.\n\t   * Width changes are necessary to figure out the widget widths.\n\t   */\n\t  onWidthChange: function onWidthChange(width) {\n\t    // Set new breakpoint\n\t    var newState = { width: width };\n\t    newState.breakpoint = this.props.breakpoint || responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, newState.width);\n\t    newState.cols = responsiveUtils.getColsFromBreakpoint(newState.breakpoint, this.props.cols);\n\t\n\t    // Breakpoint change\n\t    if (newState.cols !== this.state.cols) {\n\t\n\t      // Store the current layout\n\t      newState.layouts = this.state.layouts;\n\t      newState.layouts[this.state.breakpoint] = JSON.parse(JSON.stringify(this.state.layout));\n\t\n\t      // Find or generate a new one.\n\t      newState.layout = responsiveUtils.findOrGenerateResponsiveLayout(newState.layouts, this.props.breakpoints, newState.breakpoint, this.state.breakpoint, newState.cols, this.props.verticalLayout);\n\t\n\t      // This adds missing items.\n\t      newState.layout = utils.synchronizeLayoutWithChildren(newState.layout, this.props.children, newState.cols, this.props.verticalCompact);\n\t\n\t      // Store this new layout as well.\n\t      newState.layouts[newState.breakpoint] = newState.layout;\n\t\n\t      this.props.onBreakpointChange(newState.breakpoint, newState.cols);\n\t    }\n\t\n\t    this.setState(newState);\n\t  },\n\t\n\t  render: function render() {\n\t    // Don't pass responsive props to RGL.\n\t    /*jshint unused:false*/\n\t    var _props = this.props;\n\t    var layouts = _props.layouts;\n\t    var onBreakpointChange = _props.onBreakpointChange;\n\t    var breakpoints = _props.breakpoints;\n\t\n\t    var props = _objectWithoutProperties(_props, ['layouts', 'onBreakpointChange', 'breakpoints']);\n\t\n\t    return React.createElement(\n\t      ReactGridLayout,\n\t      _extends({}, props, {\n\t        layout: this.state.layout,\n\t        cols: this.state.cols,\n\t        listenToWindowResize: false,\n\t        onLayoutChange: this.onLayoutChange,\n\t        width: this.state.width }),\n\t      this.props.children\n\t    );\n\t  }\n\t});\n\t\n\tmodule.exports = ResponsiveReactGridLayout;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(2);\n\t\n\tvar responsiveUtils = module.exports = {\n\t\n\t  /**\n\t   * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).\n\t   *\n\t   * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})\n\t   * @param  {Number} width Screen width.\n\t   * @return {String}       Highest breakpoint that is less than width.\n\t   */\n\t  getBreakpointFromWidth: function getBreakpointFromWidth(breakpoints, width) {\n\t    var sorted = responsiveUtils.sortBreakpoints(breakpoints);\n\t    var matching = sorted[0];\n\t    for (var i = 1, len = sorted.length; i < len; i++) {\n\t      var breakpointName = sorted[i];\n\t      if (width > breakpoints[breakpointName]) matching = breakpointName;\n\t    }\n\t    return matching;\n\t  },\n\t\n\t  /**\n\t   * Given a breakpoint, get the # of cols set for it.\n\t   * @param  {String} breakpoint Breakpoint name.\n\t   * @param  {Object} cols       Map of breakpoints to cols.\n\t   * @return {Number}            Number of cols.\n\t   */\n\t  getColsFromBreakpoint: function getColsFromBreakpoint(breakpoint, cols) {\n\t    if (!cols[breakpoint]) {\n\t      throw new Error(\"ResponsiveReactGridLayout: `cols` entry for breakpoint \" + breakpoint + \" is missing!\");\n\t    }\n\t    return cols[breakpoint];\n\t  },\n\t\n\t  /**\n\t   * Given existing layouts and a new breakpoint, find or generate a new layout.\n\t   *\n\t   * This finds the layout above the new one and generates from it, if it exists.\n\t   *\n\t   * @param  {Array} layouts     Existing layouts.\n\t   * @param  {Array} breakpoints All breakpoints.\n\t   * @param  {String} breakpoint New breakpoint.\n\t   * @param  {String} breakpoint Last breakpoint (for fallback).\n\t   * @param  {Number} cols       Column count at new breakpoint.\n\t   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n\t   *   vertically.\n\t   * @return {Array}             New layout.\n\t   */\n\t  findOrGenerateResponsiveLayout: function findOrGenerateResponsiveLayout(layouts, breakpoints, breakpoint, lastBreakpoint, cols, verticalCompact) {\n\t    // If it already exists, just return it.\n\t    if (layouts[breakpoint]) return layouts[breakpoint];\n\t    // Find or generate the next layout\n\t    var layout = layouts[lastBreakpoint];\n\t    var breakpointsSorted = responsiveUtils.sortBreakpoints(breakpoints);\n\t    var breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));\n\t    for (var i = 0, len = breakpointsAbove.length; i < len; i++) {\n\t      var b = breakpointsAbove[i];\n\t      if (layouts[b]) {\n\t        layout = layouts[b];\n\t        break;\n\t      }\n\t    }\n\t    layout = JSON.parse(JSON.stringify(layout || [])); // clone layout so we don't modify existing items\n\t    return utils.compact(utils.correctBounds(layout, { cols: cols }), verticalCompact);\n\t  },\n\t\n\t  /**\n\t   * Given breakpoints, return an array of breakpoints sorted by width. This is usually\n\t   * e.g. ['xxs', 'xs', 'sm', ...]\n\t   *\n\t   * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.\n\t   * @return {Array}              Sorted breakpoints.\n\t   */\n\t  sortBreakpoints: function sortBreakpoints(breakpoints) {\n\t    var keys = Object.keys(breakpoints);\n\t    return keys.sort(function (a, b) {\n\t      return breakpoints[a] - breakpoints[b];\n\t    });\n\t  }\n\t};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar pSlice = Array.prototype.slice;\n\tvar objectKeys = __webpack_require__(16);\n\tvar isArguments = __webpack_require__(15);\n\t\n\tvar deepEqual = module.exports = function (actual, expected, opts) {\n\t  if (!opts) opts = {};\n\t  // 7.1. All identical values are equivalent, as determined by ===.\n\t  if (actual === expected) {\n\t    return true;\n\t\n\t  } else if (actual instanceof Date && expected instanceof Date) {\n\t    return actual.getTime() === expected.getTime();\n\t\n\t  // 7.3. Other pairs that do not both pass typeof value == 'object',\n\t  // equivalence is determined by ==.\n\t  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n\t    return opts.strict ? actual === expected : actual == expected;\n\t\n\t  // 7.4. For all other Object pairs, including Array objects, equivalence is\n\t  // determined by having the same number of owned properties (as verified\n\t  // with Object.prototype.hasOwnProperty.call), the same set of keys\n\t  // (although not necessarily the same order), equivalent values for every\n\t  // corresponding key, and an identical 'prototype' property. Note: this\n\t  // accounts for both named and indexed properties on Arrays.\n\t  } else {\n\t    return objEquiv(actual, expected, opts);\n\t  }\n\t}\n\t\n\tfunction isUndefinedOrNull(value) {\n\t  return value === null || value === undefined;\n\t}\n\t\n\tfunction isBuffer (x) {\n\t  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n\t  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n\t    return false;\n\t  }\n\t  if (x.length > 0 && typeof x[0] !== 'number') return false;\n\t  return true;\n\t}\n\t\n\tfunction objEquiv(a, b, opts) {\n\t  var i, key;\n\t  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n\t    return false;\n\t  // an identical 'prototype' property.\n\t  if (a.prototype !== b.prototype) return false;\n\t  //~~~I've managed to break Object.keys through screwy arguments passing.\n\t  //   Converting to array solves the problem.\n\t  if (isArguments(a)) {\n\t    if (!isArguments(b)) {\n\t      return false;\n\t    }\n\t    a = pSlice.call(a);\n\t    b = pSlice.call(b);\n\t    return deepEqual(a, b, opts);\n\t  }\n\t  if (isBuffer(a)) {\n\t    if (!isBuffer(b)) {\n\t      return false;\n\t    }\n\t    if (a.length !== b.length) return false;\n\t    for (i = 0; i < a.length; i++) {\n\t      if (a[i] !== b[i]) return false;\n\t    }\n\t    return true;\n\t  }\n\t  try {\n\t    var ka = objectKeys(a),\n\t        kb = objectKeys(b);\n\t  } catch (e) {//happens when one is a string literal and the other isn't\n\t    return false;\n\t  }\n\t  // having the same number of owned properties (keys incorporates\n\t  // hasOwnProperty)\n\t  if (ka.length != kb.length)\n\t    return false;\n\t  //the same set of keys (although not necessarily the same order),\n\t  ka.sort();\n\t  kb.sort();\n\t  //~~~cheap key test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    if (ka[i] != kb[i])\n\t      return false;\n\t  }\n\t  //equivalent values for every corresponding key, and\n\t  //~~~possibly expensive deep test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    key = ka[i];\n\t    if (!deepEqual(a[key], b[key], opts)) return false;\n\t  }\n\t  return typeof a === typeof b;\n\t}\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\tvar supportsArgumentsClass = (function(){\n\t  return Object.prototype.toString.call(arguments)\n\t})() == '[object Arguments]';\n\t\n\texports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\t\n\texports.supported = supported;\n\tfunction supported(object) {\n\t  return Object.prototype.toString.call(object) == '[object Arguments]';\n\t};\n\t\n\texports.unsupported = unsupported;\n\tfunction unsupported(object){\n\t  return object &&\n\t    typeof object == 'object' &&\n\t    typeof object.length == 'number' &&\n\t    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n\t    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n\t    false;\n\t};\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\texports = module.exports = typeof Object.keys === 'function'\n\t  ? Object.keys : shim;\n\t\n\texports.shim = shim;\n\tfunction shim (obj) {\n\t  var keys = [];\n\t  for (var key in obj) keys.push(key);\n\t  return keys;\n\t}\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar React = __webpack_require__(1);\n\tvar PureRenderMixin = __webpack_require__(4);\n\tvar emptyFunction = function(){};\n\tvar cloneWithProps = __webpack_require__(5);\n\t\n\tfunction createUIEvent(draggable) {\n\t\treturn {\n\t\t\telement: draggable.getDOMNode(),\n\t\t\tposition: {\n\t\t\t\ttop: (draggable._pendingState || draggable.state).clientY,\n\t\t\t\tleft: (draggable._pendingState || draggable.state).clientX\n\t\t\t}\n\t\t};\n\t}\n\t\n\tfunction canDragY(draggable) {\n\t\treturn draggable.props.axis === 'both' ||\n\t\t\t\tdraggable.props.axis === 'y';\n\t}\n\t\n\tfunction canDragX(draggable) {\n\t\treturn draggable.props.axis === 'both' ||\n\t\t\t\tdraggable.props.axis === 'x';\n\t}\n\t\n\tfunction isFunction(func) {\n\t  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n\t}\n\t\n\t// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\n\tfunction findInArray(array, callback) {\n\t  for (var i = 0, length = array.length, element = null; i < length, element = array[i]; i++) {\n\t    if (callback.apply(callback, [element, i, array])) return element;\n\t  }\n\t}\n\t\n\tfunction matchesSelector(el, selector) {\n\t  var method = findInArray([\n\t    'matches',\n\t    'webkitMatchesSelector',\n\t    'mozMatchesSelector',\n\t    'msMatchesSelector',\n\t    'oMatchesSelector'\n\t  ], function(method){\n\t    return isFunction(el[method]);\n\t  });\n\t\n\t  return el[method].call(el, selector);\n\t}\n\t\n\tfunction positionToCSSTransform(style) {\n\t\t// Replace unitless items with px\n\t\tvar x = ('' + style.left).replace(/(\\d)$/, '$1px');\n\t\tvar y = ('' + style.top).replace(/(\\d)$/, '$1px');\n\t\tstyle.transform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.WebkitTransform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.OTransform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.msTransform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.MozTransform = 'translate(' + x + ',' + y + ')';\n\t\tdelete style.left;\n\t\tdelete style.top;\n\t\treturn style;\n\t}\n\t\n\t// @credits: http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript/4819886#4819886\n\t/* Conditional to fix node server side rendering of component */\n\tif (typeof window === 'undefined') {\n\t    // Do Node Stuff\n\t    var isTouchDevice = false;\n\t} else {\n\t    // Do Browser Stuff\n\t    var isTouchDevice = 'ontouchstart' in window || // works on most browsers\n\t      'onmsgesturechange' in window; // works on ie10 on ms surface\n\t}\n\t\n\t// look ::handleDragStart\n\t//function isMultiTouch(e) {\n\t//  return e.touches && Array.isArray(e.touches) && e.touches.length > 1\n\t//}\n\t\n\t/**\n\t * simple abstraction for dragging events names\n\t * */\n\tvar dragEventFor = (function () {\n\t  var eventsFor = {\n\t    touch: {\n\t      start: 'touchstart',\n\t      move: 'touchmove',\n\t      end: 'touchend'\n\t    },\n\t    mouse: {\n\t      start: 'mousedown',\n\t      move: 'mousemove',\n\t      end: 'mouseup'\n\t    }\n\t  };\n\t  return eventsFor['mouse'];\n\t})();\n\t\n\t/**\n\t * get {clientX, clientY} positions of control\n\t * */\n\tfunction getControlPosition(e) {\n\t  var position = (e.touches && e.touches[0]) || e;\n\t  return {\n\t    clientX: position.clientX,\n\t    clientY: position.clientY\n\t  };\n\t}\n\t\n\tfunction addEvent(el, event, handler) {\n\t\tif (!el) { return; }\n\t\tif (el.attachEvent) {\n\t\t\tel.attachEvent('on' + event, handler);\n\t\t} else if (el.addEventListener) {\n\t\t\tel.addEventListener(event, handler, true);\n\t\t} else {\n\t\t\tel['on' + event] = handler;\n\t\t}\n\t}\n\t\n\tfunction removeEvent(el, event, handler) {\n\t\tif (!el) { return; }\n\t\tif (el.detachEvent) {\n\t\t\tel.detachEvent('on' + event, handler);\n\t\t} else if (el.removeEventListener) {\n\t\t\tel.removeEventListener(event, handler, true);\n\t\t} else {\n\t\t\tel['on' + event] = null;\n\t\t}\n\t}\n\t\n\tmodule.exports = React.createClass({\n\t\tdisplayName: 'Draggable',\n\t\tmixins: [PureRenderMixin],\n\t\n\t\tpropTypes: {\n\t\t\t/**\n\t\t\t * `axis` determines which axis the draggable can move.\n\t\t\t *\n\t\t\t * 'both' allows movement horizontally and vertically.\n\t\t\t * 'x' limits movement to horizontal axis.\n\t\t\t * 'y' limits movement to vertical axis.\n\t\t\t *\n\t\t\t * Defaults to 'both'.\n\t\t\t */\n\t\t\taxis: React.PropTypes.oneOf(['both', 'x', 'y']),\n\t\n\t\t\t/**\n\t\t\t * `handle` specifies a selector to be used as the handle that initiates drag.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t    \treturn (\n\t\t\t * \t    \t \t<Draggable handle=\".handle\">\n\t\t\t * \t    \t \t  <div>\n\t\t\t * \t    \t \t      <div className=\"handle\">Click me to drag</div>\n\t\t\t * \t    \t \t      <div>This is some other content</div>\n\t\t\t * \t    \t \t  </div>\n\t\t\t * \t    \t\t</Draggable>\n\t\t\t * \t    \t);\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\thandle: React.PropTypes.string,\n\t\n\t\t\t/**\n\t\t\t * `cancel` specifies a selector to be used to prevent drag initialization.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return(\n\t\t\t * \t            <Draggable cancel=\".cancel\">\n\t\t\t * \t                <div>\n\t\t\t * \t                \t<div className=\"cancel\">You can't drag from here</div>\n\t\t\t *\t\t\t\t\t\t<div>Dragging here works fine</div>\n\t\t\t * \t                </div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tcancel: React.PropTypes.string,\n\t\n\t\t\t/**\n\t\t\t * `grid` specifies the x and y that dragging should snap to.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable grid={[25, 25]}>\n\t\t\t * \t                <div>I snap to a 25 x 25 grid</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tgrid: React.PropTypes.arrayOf(React.PropTypes.number),\n\t\n\t\t\t/**\n\t\t\t * `start` specifies the x and y that the dragged item should start at\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable start={{x: 25, y: 25}}>\n\t\t\t * \t                <div>I start with left: 25px; top: 25px;</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tstart: React.PropTypes.object,\n\t\n\t\t\t/**\n\t\t\t * `moveOnStartChange` tells the Draggable element to reset its position\n\t\t\t * if the `start` parameters are changed. By default, if the `start`\n\t\t\t * parameters change, the Draggable element still remains where it started\n\t\t\t * or was dragged to.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t\t\tonButtonClick: function () {\n\t\t\t * \t\t\t\tthis.setState({clicked: true});\n\t\t\t * \t\t\t},\n\t\t\t * \t    render: function () {\n\t\t\t * \t    \t\tvar start = this.state.clicked ?\n\t\t\t * \t    \t\t  {x: 25, y: 25} :\n\t\t\t * \t    \t\t  {x: 125, y: 125};\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable start={start}>\n\t\t\t * \t                <div>I start with left: 25px; top: 25px;,\n\t\t\t * \t                but move to left: 125px; top: 125px; when the button\n\t\t\t * \t                is clicked.</div>\n\t\t\t * \t                <div onClick={this.onButtonClick}>Button</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tmoveOnStartChange: React.PropTypes.bool,\n\t\n\t\t\t/**\n\t\t\t * `useCSSTransforms` if true will place the element using translate(x, y)\n\t\t\t * rather than CSS top/left.\n\t\t\t *\n\t\t\t * This generally gives better performance, and is useful in combination with\n\t\t\t * other layout systems that use translate(), such as react-grid-layout.\n\t\t\t */\n\t\t\tuseCSSTransforms: React.PropTypes.bool,\n\t\n\t\t\t/**\n\t\t\t * `zIndex` specifies the zIndex to use while dragging.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable zIndex={100}>\n\t\t\t * \t                <div>I have a zIndex</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tzIndex: React.PropTypes.number,\n\t\n\t\t\t/**\n\t\t\t * Called when dragging starts.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\tfunction (event, ui) {}\n\t\t\t * ```\n\t\t\t *\n\t\t\t * `event` is the Event that was triggered.\n\t\t\t * `ui` is an object:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\t{\n\t\t\t *\t\tposition: {top: 0, left: 0}\n\t\t\t *\t}\n\t\t\t * ```\n\t\t\t */\n\t\t\tonStart: React.PropTypes.func,\n\t\n\t\t\t/**\n\t\t\t * Called while dragging.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\tfunction (event, ui) {}\n\t\t\t * ```\n\t\t\t *\n\t\t\t * `event` is the Event that was triggered.\n\t\t\t * `ui` is an object:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\t{\n\t\t\t *\t\tposition: {top: 0, left: 0}\n\t\t\t *\t}\n\t\t\t * ```\n\t\t\t */\n\t\t\tonDrag: React.PropTypes.func,\n\t\n\t\t\t/**\n\t\t\t * Called when dragging stops.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\tfunction (event, ui) {}\n\t\t\t * ```\n\t\t\t *\n\t\t\t * `event` is the Event that was triggered.\n\t\t\t * `ui` is an object:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\t{\n\t\t\t *\t\tposition: {top: 0, left: 0}\n\t\t\t *\t}\n\t\t\t * ```\n\t\t\t */\n\t\t\tonStop: React.PropTypes.func,\n\t\n\t\t\t/**\n\t\t\t * A workaround option which can be passed if onMouseDown needs to be accessed,\n\t\t\t * since it'll always be blocked (due to that there's internal use of onMouseDown)\n\t\t\t *\n\t\t\t */\n\t\t\tonMouseDown: React.PropTypes.func\n\t\t},\n\t\n\t\tcomponentWillUnmount: function() {\n\t\t\t// Remove any leftover event handlers\n\t\t\tremoveEvent(window, dragEventFor['move'], this.handleDrag);\n\t\t\tremoveEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t\t},\n\t\n\t\tcomponentWillReceiveProps: function(nextProps) {\n\t\t\t// If this is set to watch a changing start position,\n\t\t\t// set x and y to the new position.\n\t\t\tif (nextProps.moveOnStartChange) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tclientX: nextProps.start.x,\n\t\t\t\t\tclientY: nextProps.start.y\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\n\t\tgetDefaultProps: function () {\n\t\t\treturn {\n\t\t\t\taxis: 'both',\n\t\t\t\thandle: null,\n\t\t\t\tcancel: null,\n\t\t\t\tgrid: null,\n\t\t\t\tstart: {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0\n\t\t\t\t},\n\t\t\t\tmoveOnStartChange: false,\n\t\t\t\tuseCSSTransforms: false,\n\t\t\t\tzIndex: NaN,\n\t\t\t\tonStart: emptyFunction,\n\t\t\t\tonDrag: emptyFunction,\n\t\t\t\tonStop: emptyFunction,\n\t\t\t\tonMouseDown: emptyFunction\n\t\t\t};\n\t\t},\n\t\n\t\tgetInitialState: function () {\n\t\t\treturn {\n\t\t\t\t// Whether or not currently dragging\n\t\t\t\tdragging: false,\n\t\n\t\t\t\t// Start top/left of this.getDOMNode()\n\t\t\t\tstartX: 0, startY: 0,\n\t\n\t\t\t\t// Offset between start top/left and mouse top/left\n\t\t\t\toffsetX: 0, offsetY: 0,\n\t\n\t\t\t\t// Current top/left of this.getDOMNode()\n\t\t\t\tclientX: this.props.start.x, clientY: this.props.start.y\n\t\t\t};\n\t\t},\n\t\n\t\thandleDragStart: function (e) {\n\t    // todo: write right implementation to prevent multitouch drag\n\t    // prevent multi-touch events\n\t    // if (isMultiTouch(e)) {\n\t    //     this.handleDragEnd.apply(e, arguments);\n\t    //     return\n\t    // }\n\t\n\t\t\t// Make it possible to attach event handlers on top of this one\n\t\t\tthis.props.onMouseDown(e);\n\t\n\t\t\t// Only catch left clicks, if clicking\n\t\t\tif (typeof e.button === \"number\" && e.button !== 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tvar node = this.getDOMNode();\n\t\n\t\t\t// Short circuit if handle or cancel prop was provided and selector doesn't match\n\t\t\tif ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||\n\t\t\t\t(this.props.cancel && matchesSelector(e.target, this.props.cancel))) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t    var dragPoint = getControlPosition(e);\n\t\n\t\t\t// Initiate dragging\n\t\t\tthis.setState({\n\t\t\t\tdragging: true,\n\t\t\t\toffsetX: parseInt(dragPoint.clientX, 10),\n\t\t\t\toffsetY: parseInt(dragPoint.clientY, 10),\n\t\t\t\tstartX: parseInt(this.state.clientX, 10) || 0,\n\t\t\t\tstartY: parseInt(this.state.clientY, 10) || 0\n\t\t\t});\n\t\n\t\t\t// Add a class to the body to disable user-select. This prevents text from\n\t\t\t// being selected all over the page.\n\t\t\tdocument.body.className += \" react-draggable-active\";\n\t\n\t\t\t// Call event handler\n\t\t\tthis.props.onStart(e, createUIEvent(this));\n\t\n\t\t\t// Add event handlers\n\t\t\taddEvent(window, dragEventFor['move'], this.handleDrag);\n\t\t\taddEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t\t},\n\t\n\t\thandleDragEnd: function (e) {\n\t\t\t// Short circuit if not currently dragging\n\t\t\tif (!this.state.dragging) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// Turn off dragging\n\t\t\tthis.setState({\n\t\t\t\tdragging: false\n\t\t\t});\n\t\n\t\t\t// Remove the body class used to disable user-select.\n\t\t\tdocument.body.className = document.body.className.replace(\" react-draggable-active\", \"\");\n\t\n\t\t\t// Call event handler\n\t\t\tthis.props.onStop(e, createUIEvent(this));\n\t\n\t\t\t// Remove event handlers\n\t    removeEvent(window, dragEventFor['move'], this.handleDrag);\n\t    removeEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t\t},\n\t\n\t\thandleDrag: function (e) {\n\t    var dragPoint = getControlPosition(e);\n\t\n\t\t\t// Calculate top and left\n\t    var clientX = (this.state.startX + (dragPoint.clientX - this.state.offsetX));\n\t    var clientY = (this.state.startY + (dragPoint.clientY - this.state.offsetY));\n\t\n\t\t\t// Snap to grid if prop has been provided\n\t\t\tif (Array.isArray(this.props.grid)) {\n\t\t\t\tvar directionX = clientX < parseInt(this.state.clientX, 10) ? -1 : 1;\n\t\t\t\tvar directionY = clientY < parseInt(this.state.clientY, 10) ? -1 : 1;\n\t\n\t\t\t\tclientX = Math.abs(clientX - parseInt(this.state.clientX, 10)) >= this.props.grid[0]\n\t\t\t\t\t\t? (parseInt(this.state.clientX, 10) + (this.props.grid[0] * directionX))\n\t\t\t\t\t\t: parseInt(this.state.clientX, 10);\n\t\n\t\t\t\tclientY = Math.abs(clientY - parseInt(this.state.clientY, 10)) >= this.props.grid[1]\n\t\t\t\t\t\t? (parseInt(this.state.clientY, 10) + (this.props.grid[1] * directionY))\n\t\t\t\t\t\t: parseInt(this.state.clientY, 10);\n\t\t\t}\n\t\n\t\t\t// Min/max constraints\n\t\t\tif (Array.isArray(this.props.minConstraints)) {\n\t\t\t\tclientX = Math.max(this.props.minConstraints[0], clientX);\n\t\t\t\tclientY = Math.max(this.props.minConstraints[1], clientY);\n\t\t\t}\n\t\t\tif (Array.isArray(this.props.maxConstraints)) {\n\t\t\t\tclientX = Math.min(this.props.maxConstraints[0], clientX);\n\t\t\t\tclientY = Math.min(this.props.maxConstraints[1], clientY);\n\t\t\t}\n\t\n\t\t\t// Update top and left\n\t\t\tthis.setState({\n\t\t\t\tclientX: clientX,\n\t\t\t\tclientY: clientY\n\t\t\t});\n\t\n\t\t\t// Call event handler\n\t\t\tthis.props.onDrag(e, createUIEvent(this));\n\t\t},\n\t\n\t\trender: function () {\n\t\t\tvar style = {\n\t\t\t\t// Set top if vertical drag is enabled\n\t\t\t\ttop: canDragY(this)\n\t\t\t\t\t? this.state.clientY\n\t\t\t\t\t: this.state.startY,\n\t\n\t\t\t\t// Set left if horizontal drag is enabled\n\t\t\t\tleft: canDragX(this)\n\t\t\t\t\t? this.state.clientX\n\t\t\t\t\t: this.state.startX\n\t\t\t};\n\t\n\t\t\tif (this.props.useCSSTransforms) {\n\t\t\t\tstyle = positionToCSSTransform(style);\n\t\t\t}\n\t\n\t\t\t// Set zIndex if currently dragging and prop has been provided\n\t\t\tif (this.state.dragging && !isNaN(this.props.zIndex)) {\n\t\t\t\tstyle.zIndex = this.props.zIndex;\n\t\t\t}\n\t\n\t\t\t// Reuse the child provided\n\t\t\t// This makes it flexible to use whatever element is wanted (div, ul, etc)\n\t\t\treturn cloneWithProps(React.Children.only(this.props.children), {\n\t\t\t\tstyle: style,\n\t\t\t\tclassName: 'react-draggable' + (this.state.dragging ? ' react-draggable-dragging' : ''),\n\t\n\t\t\t\tonMouseDown: this.handleDragStart,\n\t\t\t\tonTouchStart: function(ev){\n\t        ev.preventDefault(); // prevent for scroll\n\t        return this.handleDragStart.apply(this, arguments);\n\t      }.bind(this),\n\t\n\t\t\t\tonMouseUp: this.handleDragEnd,\n\t\t\t\tonTouchEnd: this.handleDragEnd\n\t\t\t});\n\t\t}\n\t});\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\t\n\tfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\t\n\tvar React = __webpack_require__(1);\n\tvar Resizable = __webpack_require__(10);\n\tvar PureRenderMixin = __webpack_require__(4);\n\t\n\t// An example use of Resizable.\n\tvar ResizableBox = module.exports = React.createClass({\n\t  displayName: 'ResizableBox',\n\t  mixins: [PureRenderMixin],\n\t\n\t  propTypes: {\n\t    lockAspectRatio: React.PropTypes.bool\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      lockAspectRatio: false,\n\t      handleSize: [20, 20],\n\t      minConstraints: [20, 20]\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      width: this.props.width,\n\t      height: this.props.height,\n\t      aspectRatio: this.props.width / this.props.height\n\t    };\n\t  },\n\t\n\t  onResize: function onResize(event, _ref) {\n\t    var element = _ref.element;\n\t    var size = _ref.size;\n\t    var width = size.width;\n\t    var height = size.height;\n\t\n\t    var widthChanged = width !== this.state.width,\n\t        heightChanged = height !== this.state.height;\n\t    if (!widthChanged && !heightChanged) return;\n\t\n\t    if (this.props.lockAspectRatio) {\n\t      var _preserveAspectRatio = this.preserveAspectRatio(width, height);\n\t\n\t      var _preserveAspectRatio2 = _slicedToArray(_preserveAspectRatio, 2);\n\t\n\t      width = _preserveAspectRatio2[0];\n\t      height = _preserveAspectRatio2[1];\n\t    }\n\t\n\t    this.setState({\n\t      width: width,\n\t      height: height\n\t    });\n\t  },\n\t\n\t  // If you do this, be careful of constraints\n\t  preserveAspectRatio: function preserveAspectRatio(width, height) {\n\t    var min = this.props.minConstraints;\n\t    var max = this.props.maxConstraints;\n\t\n\t    height = width / this.state.aspectRatio;\n\t    width = height * this.state.aspectRatio;\n\t\n\t    if (min) {\n\t      width = Math.max(min[0], width);\n\t      height = Math.max(min[1], height);\n\t    }\n\t    if (max) {\n\t      width = Math.min(max[0], width);\n\t      height = Math.min(max[1], height);\n\t    }\n\t    return [width, height];\n\t  },\n\t\n\t  render: function render() {\n\t    // Basic wrapper around a Resizable instance.\n\t    // If you use Resizable directly, you are responsible for updating the component\n\t    // with a new width and height.\n\t    var _props = this.props;\n\t    var handleSize = _props.handleSize;\n\t    var minConstraints = _props.minConstraints;\n\t    var maxConstraints = _props.maxConstraints;\n\t\n\t    var props = _objectWithoutProperties(_props, ['handleSize', 'minConstraints', 'maxConstraints']);\n\t\n\t    return React.createElement(\n\t      Resizable,\n\t      {\n\t        minConstraints: minConstraints,\n\t        maxConstraints: maxConstraints,\n\t        handleSize: handleSize,\n\t        width: this.state.width,\n\t        height: this.state.height,\n\t        onResize: this.onResize,\n\t        draggableOpts: this.props.draggableOpts\n\t      },\n\t      React.createElement(\n\t        'div',\n\t        _extends({ style: { width: this.state.width + 'px', height: this.state.height + 'px' } }, props),\n\t        this.props.children\n\t      )\n\t    );\n\t  }\n\t});\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tmodule.exports = function() {\n\t  throw new Error(\"Don't instantiate Resizable directly! Use require('react-resizable').Resizable\");\n\t};\n\t\n\tmodule.exports.Resizable = __webpack_require__(10);\n\tmodule.exports.ResizableBox = __webpack_require__(18);\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule shallowEqual\n\t */\n\t\n\t'use strict';\n\t\n\t/**\n\t * Performs equality by iterating through keys on an object and returning\n\t * false when any key has values which are not strictly equal between\n\t * objA and objB. Returns true when the values of all keys are strictly equal.\n\t *\n\t * @return {boolean}\n\t */\n\tfunction shallowEqual(objA, objB) {\n\t  if (objA === objB) {\n\t    return true;\n\t  }\n\t  var key;\n\t  // Test for A's keys different from B.\n\t  for (key in objA) {\n\t    if (objA.hasOwnProperty(key) &&\n\t        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n\t      return false;\n\t    }\n\t  }\n\t  // Test for B's keys missing from A.\n\t  for (key in objB) {\n\t    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n\t      return false;\n\t    }\n\t  }\n\t  return true;\n\t}\n\t\n\tmodule.exports = shallowEqual;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** react-grid-layout.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b501434341383da68e0b\n **/","module.exports = require('./lib/ReactGridLayout');\nmodule.exports.Responsive = require('./lib/ResponsiveReactGridLayout');\n\n\n\n/** WEBPACK FOOTER **\n ** ./index-dev.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\",\"root\":\"React\"}\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nvar assign = require('object-assign');\n\nvar utils = module.exports = {\n\n  /**\n   * Return the bottom coordinate of the layout.\n   *\n   * @param  {Array} layout Layout array.\n   * @return {Number}       Bottom coordinate.\n   */\n  bottom(layout) {\n    var max = 0, bottomY;\n    for (var i = 0, len = layout.length; i < len; i++) {\n      bottomY = layout[i].y + layout[i].h;\n      if (bottomY > max) max = bottomY;\n    }\n    return max;\n  },\n\n  /**\n   * Clones a shallow object.\n   * @param  {Object} obj Object to clone.\n   * @return {Object}   Cloned object.\n   */\n  clone(obj) {\n    return assign({}, obj);\n  },\n\n  /**\n   * Given two layouts, check if they collide.\n   *\n   * @param  {Object} l1 Layout object.\n   * @param  {Object} l2 Layout object.\n   * @return {Boolean}   True if colliding.\n   */\n  collides(l1, l2) {\n    if (l1 === l2) return false; // same element\n    if (l1.x + l1.w <= l2.x) return false; // l1 is left of l2\n    if (l1.x >= l2.x + l2.w) return false; // l1 is right of l2\n    if (l1.y + l1.h <= l2.y) return false; // l1 is above l2\n    if (l1.y >= l2.y + l2.h) return false; // l1 is below l2\n    return true; // boxes overlap\n  },\n\n  /**\n   * Given a layout, compact it. This involves going down each y coordinate and removing gaps\n   * between items.\n   *\n   * @param  {Array} layout Layout.\n   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n   *   vertically.\n   * @return {Array}       Compacted Layout.\n   */\n  compact(layout, verticalCompact) {\n    // Statics go in the compareWith array right away so items flow around them.\n    var compareWith = utils.getStatics(layout), out = [];\n    // We go through the items by row and column.\n    var sorted = utils.sortLayoutItemsByRowCol(layout);\n\n    for (var i = 0, len = sorted.length; i < len; i++) {\n      var l = sorted[i];\n\n      // Don't move static elements\n      if (!l.static) {\n        l = utils.compactItem(compareWith, l, verticalCompact);\n\n        // Add to comparison array. We only collide with items before this one.\n        // Statics are already in this array.\n        compareWith.push(l);\n      }\n\n      // Add to output array to make sure they still come out in the right order.\n      out[layout.indexOf(l)] = l;\n\n      // Clear moved flag, if it exists.\n      delete l.moved;\n    }\n\n    return out;\n  },\n\n  compactItem(compareWith, l, verticalCompact) {\n    if (verticalCompact) {\n      // Move the element up as far as it can go without colliding.\n      while (l.y > 0 && !utils.getFirstCollision(compareWith, l)) {\n        l.y--;\n      }\n    }\n\n    // Move it down, and keep moving it down if it's colliding.\n    var collides;\n    while((collides = utils.getFirstCollision(compareWith, l))) {\n      l.y = collides.y + collides.h;\n    }\n    return l;\n  },\n\n  /**\n   * Given a layout, make sure all elements fit within its bounds.\n   *\n   * @param  {Array} layout Layout array.\n   * @param  {Number} bounds Number of columns.\n   * @return {[type]}        [description]\n   */\n  correctBounds(layout, bounds) {\n    var collidesWith = utils.getStatics(layout);\n    for (var i = 0, len = layout.length; i < len; i++) {\n      var l = layout[i];\n      // Overflows right\n      if (l.x + l.w > bounds.cols) l.x = bounds.cols - l.w;\n      // Overflows left\n      if (l.x < 0) {\n        l.x = 0;\n        l.w = bounds.cols;\n      }\n      if (!l.static) collidesWith.push(l);\n      else {\n        // If this is static and collides with other statics, we must move it down.\n        // We have to do something nicer than just letting them overlap.\n        while(utils.getFirstCollision(collidesWith, l)) {\n          l.y++;\n        }\n      }\n\n    }\n    return layout;\n  },\n\n  /**\n   * Get a layout item by ID. Used so we can override later on if necessary.\n   *\n   * @param  {Array}  layout Layout array.\n   * @param  {Number} id     ID\n   * @return {LayoutItem}    Item at ID.\n   */\n  getLayoutItem(layout, id) {\n    id = \"\" + id;\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (\"\" + layout[i].i === id) return layout[i];\n    }\n  },\n\n  /**\n   * Returns the first item this layout collides with.\n   * It doesn't appear to matter which order we approach this from, although\n   * perhaps that is the wrong thing to do.\n   *\n   * @param  {Object} layoutItem Layout item.\n   * @return {Object|undefined}  A colliding layout item, or undefined.\n   */\n  getFirstCollision(layout, layoutItem) {\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (utils.collides(layout[i], layoutItem)) return layout[i];\n    }\n  },\n\n  getAllCollisions(layout, layoutItem) {\n    var out = [];\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (utils.collides(layout[i], layoutItem)) out.push(layout[i]);\n    }\n    return out;\n  },\n\n  /**\n   * Get all static elements.\n   * @param  {Array} layout Array of layout objects.\n   * @return {Array}        Array of static layout items..\n   */\n  getStatics(layout) {\n    var out = [];\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (layout[i].static) out.push(layout[i]);\n    }\n    return out;\n  },\n\n  /**\n   * Move an element. Responsible for doing cascading movements of other elements.\n   *\n   * @param  {Array}      layout Full layout to modify.\n   * @param  {LayoutItem} l      element to move.\n   * @param  {Number}     [x]    X position in grid units.\n   * @param  {Number}     [y]    Y position in grid units.\n   * @param  {Boolean}    [isUserAction] If true, designates that the item we're moving is\n   *                                     being dragged/resized by th euser.\n   */\n  moveElement(layout, l, x, y, isUserAction) {\n    if (l.static) return layout;\n\n    // Short-circuit if nothing to do.\n    if (l.y === y && l.x === x) return layout;\n\n    var movingUp = l.y > y;\n    // This is quite a bit faster than extending the object\n    if (x !== undefined) l.x = x;\n    if (y !== undefined) l.y = y;\n    l.moved = true;\n\n    // If this collides with anything, move it.\n    // When doing this comparison, we have to sort the items we compare with\n    // to ensure, in the case of multiple collisions, that we're getting the\n    // nearest collision.\n    var sorted = utils.sortLayoutItemsByRowCol(layout);\n    if (movingUp) sorted = sorted.reverse();\n    var collisions = utils.getAllCollisions(sorted, l);\n\n    // Move each item that collides away from this element.\n    for (var i = 0, len = collisions.length; i < len; i++) {\n      var collision = collisions[i];\n      // console.log('resolving collision between', l.i, 'at', l.y, 'and', collision.i, 'at', collision.y);\n\n      // Short circuit so we can't infinite loop\n      if (collision.moved) continue;\n\n      // This makes it feel a bit more precise by waiting to swap for just a bit when moving up.\n      if (l.y > collision.y && l.y - collision.y > collision.h / 4) continue;\n\n      // Don't move static items - we have to move *this* element away\n      if (collision.static) {\n        layout = utils.moveElementAwayFromCollision(layout, collision, l, isUserAction);\n      } else {\n        layout = utils.moveElementAwayFromCollision(layout, l, collision, isUserAction);\n      }\n    }\n\n    return layout;\n  },\n\n  /**\n   * This is where the magic needs to happen - given a collision, move an element away from the collision.\n   * We attempt to move it up if there's room, otherwise it goes below.\n   *\n   * @param  {Array} layout            Full layout to modify.\n   * @param  {LayoutItem} collidesWith Layout item we're colliding with.\n   * @param  {LayoutItem} itemToMove   Layout item we're moving.\n   * @param  {Boolean} [isUserAction]  If true, designates that the item we're moving is being dragged/resized\n   *                                   by the user.\n   */\n  moveElementAwayFromCollision(layout, collidesWith, itemToMove, isUserAction) {\n\n    // If there is enough space above the collision to put this element, move it there.\n    // We only do this on the main collision as this can get funky in cascades and cause\n    // unwanted swapping behavior.\n    if (isUserAction) {\n      // Make a mock item so we don't modify the item here, only modify in moveElement.\n      var fakeItem = {\n        x: itemToMove.x,\n        y: itemToMove.y,\n        w: itemToMove.w,\n        h: itemToMove.h,\n      };\n      fakeItem.y = Math.max(collidesWith.y - itemToMove.h, 0);\n      if (!utils.getFirstCollision(layout, fakeItem)) {\n        return utils.moveElement(layout, itemToMove, undefined, fakeItem.y);\n      }\n    }\n\n    // Previously this was optimized to move below the collision directly, but this can cause problems\n    // with cascading moves, as an item may actually leapflog a collision and cause a reversal in order.\n    return utils.moveElement(layout, itemToMove, undefined, itemToMove.y + 1);\n  },\n\n  /**\n   * Helper to convert a number to a percentage string.\n   *\n   * @param  {Number} num Any number\n   * @return {String}     That number as a percentage.\n   */\n  perc(num) {\n    return num * 100 + '%';\n  },\n\n  setTransform(style, coords) {\n    // Replace unitless items with px\n    var x = ('' + coords[0]).replace(/(\\d)$/, '$1px');\n    var y = ('' + coords[1]).replace(/(\\d)$/, '$1px');\n    style.transform = \"translate(\" + x + \",\" + y + \")\";\n    style.WebkitTransform = \"translate(\" + x + \",\" + y + \")\";\n    style.MozTransform = \"translate(\" + x + \",\" + y + \")\";\n    style.msTransform = \"translate(\" + x + \",\" + y + \")\";\n    style.OTransform = \"translate(\" + x + \",\" + y + \")\";\n    return style;\n  },\n\n  /**\n   * Get layout items sorted from top left to right and down.\n   *\n   * @return {Array} Array of layout objects.\n   * @return {Array}        Layout, sorted static items first.\n   */\n  sortLayoutItemsByRowCol(layout) {\n    return [].concat(layout).sort(function(a, b) {\n      if (a.y > b.y || (a.y === b.y && a.x > b.x)) {\n        return 1;\n      }\n      return -1;\n    });\n  },\n\n  /**\n   * Generate a layout using the initialLayout an children as a template.\n   * Missing entries will be added, extraneous ones will be truncated.\n   *\n   * @param  {Array}  initialLayout Layout passed in through props.\n   * @param  {String} breakpoint    Current responsive breakpoint.\n   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n   *   vertically.\n   * @return {Array}                Working layout.\n   */\n  synchronizeLayoutWithChildren(initialLayout, children, cols, verticalCompact) {\n    // ensure 'children' is always an array\n    if (!Array.isArray(children)) {\n      children = [children];\n    }\n    initialLayout = initialLayout || [];\n\n    // Generate one layout item per child.\n    var layout = [];\n    for (var i = 0, len = children.length; i < len; i++) {\n      var child = children[i];\n      // Don't overwrite if it already exists.\n      var exists = utils.getLayoutItem(initialLayout, child.key);\n      if (exists) {\n        // Ensure 'i' is always a string\n        exists.i = '' + exists.i;\n        layout.push(exists);\n        continue;\n      }\n      // New item: attempt to use a layout item from the child, if it exists.\n      var g = child.props._grid;\n      if (g) {\n        utils.validateLayout([g], 'ReactGridLayout.child');\n        // Validated; add it to the layout. Bottom 'y' possible is the bottom of the layout.\n        // This allows you to do nice stuff like specify {y: Infinity}\n        if (verticalCompact) {\n          layout.push(assign({}, g, {y: Math.min(utils.bottom(layout), g.y), i: child.key}));\n        } else {\n          layout.push(assign({}, g, {y: g.y, i:child.key}));\n        }\n      } else {\n        // Nothing provided: ensure this is added to the bottom\n        layout.push({w: 1, h: 1, x: 0, y: utils.bottom(layout), i: child.key});\n      }\n    }\n\n    // Correct the layout.\n    layout = utils.correctBounds(layout, {cols: cols});\n    layout = utils.compact(layout, verticalCompact);\n\n    return layout;\n  },\n\n  /**\n   * Validate a layout. Throws errors.\n   *\n   * @param  {Array}  layout        Array of layout items.\n   * @param  {String} [contextName] Context name for errors.\n   * @throw  {Error}                Validation error.\n   */\n  validateLayout(layout, contextName) {\n    contextName = contextName || \"Layout\";\n    var subProps = ['x', 'y', 'w', 'h'];\n    if (!Array.isArray(layout)) throw new Error(contextName + \" must be an array!\");\n    for (var i = 0, len = layout.length; i < len; i++) {\n      for (var j = 0; j < subProps.length; j++) {\n        if (typeof layout[i][subProps[j]] !== 'number') {\n          throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].' + subProps[j] + ' must be a Number!');\n        }\n      }\n      if (layout[i].static !== undefined && typeof layout[i].static !== 'boolean') {\n        throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].static must be a Boolean!');\n      }\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/utils.js\n **/","'use strict';\nvar deepEqual = require('deep-equal');\n\n// Like PureRenderMixin, but with deep comparisons.\nvar PureDeepRenderMixin = {\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return !deepEqual(this.props, nextProps) ||\n           !deepEqual(this.state, nextState);\n  }\n};\n\nmodule.exports = PureDeepRenderMixin;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/mixins/PureDeepRenderMixin.js\n **/","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n* @providesModule ReactComponentWithPureRenderMixin\n*/\n\n'use strict';\n\nvar shallowEqual = require(\"./shallowEqual\");\n\n/**\n * If your React component's render function is \"pure\", e.g. it will render the\n * same result given the same props and state, provide this Mixin for a\n * considerable performance boost.\n *\n * Most React components have pure render functions.\n *\n * Example:\n *\n *   var ReactComponentWithPureRenderMixin =\n *     require('ReactComponentWithPureRenderMixin');\n *   React.createClass({\n *     mixins: [ReactComponentWithPureRenderMixin],\n *\n *     render: function() {\n *       return <div className={this.props.className}>foo</div>;\n *     }\n *   });\n *\n * Note: This only checks shallow equality for props and state. If these contain\n * complex data structures this mixin may have false-negatives for deeper\n * differences. Only mixin to components which have simple props and state, or\n * use `forceUpdate()` when you know deep data structures have changed.\n */\nvar ReactComponentWithPureRenderMixin = {\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return !shallowEqual(this.props, nextProps) ||\n           !shallowEqual(this.state, nextState);\n  }\n};\n\nmodule.exports = ReactComponentWithPureRenderMixin;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/ReactComponentWithPureRenderMixin.js\n ** module id = 4\n ** module chunks = 0\n **/","'use strict';\r\nvar React    = require('react')\r\n  , hasOwn   = Object.prototype.hasOwnProperty\r\n  , version  = React.version.split('.').map(parseFloat)\r\n  , RESERVED = {\r\n      className:  resolve(joinClasses),\r\n      children:   function(){},\r\n      key:        function(){},\r\n      ref:        function(){},\r\n      style:      resolve(extend)\r\n    };\r\n\r\nmodule.exports = function cloneWithProps(child, props) {\r\n  var newProps = mergeProps(props, child.props);\r\n\r\n  if (!hasOwn.call(newProps, 'children') && hasOwn.call(child.props, 'children'))\r\n    newProps.children = child.props.children;\r\n\r\n  // < 0.11\r\n  if (version[0] === 0 && version[1] < 11)\r\n    return child.constructor.ConvenienceConstructor(newProps);\r\n  \r\n  // 0.11\r\n  if (version[0] === 0 && version[1] === 11)\r\n    return child.constructor(newProps);\r\n\r\n  // 0.12\r\n  else if (version[0] === 0 && version[1] === 12){\r\n    MockLegacyFactory.isReactLegacyFactory = true\r\n    MockLegacyFactory.type = child.type\r\n    return React.createElement(MockLegacyFactory, newProps);\r\n  }\r\n\r\n  // 0.13+\r\n  return React.createElement(child.type, newProps);\r\n\r\n  function MockLegacyFactory(){}\r\n}\r\n\r\nfunction mergeProps(currentProps, childProps) {\r\n  var newProps = extend(currentProps), key\r\n\r\n  for (key in childProps) {\r\n    if (hasOwn.call(RESERVED, key) )\r\n      RESERVED[key](newProps, childProps[key], key)\r\n\r\n    else if ( !hasOwn.call(newProps, key) )\r\n      newProps[key] = childProps[key];\r\n  }\r\n  return newProps\r\n}\r\n\r\nfunction resolve(fn){\r\n  return function(src, value, key){\r\n    if( !hasOwn.call(src, key)) src[key] = value\r\n    else src[key] = fn(src[key], value)\r\n  }\r\n}\r\n\r\nfunction joinClasses(a, b){\r\n  if ( !a ) return b || ''\r\n  return a + (b ? ' ' + b : '')\r\n}\r\n\r\nfunction extend() {\r\n  var target = {};\r\n  for (var i = 0; i < arguments.length; i++) \r\n    for (var key in arguments[i]) if (hasOwn.call(arguments[i], key)) \r\n      target[key] = arguments[i][key]   \r\n  return target\r\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/cloneWithProps.js\n ** module id = 5\n ** module chunks = 0\n **/","'use strict';\nvar React = require('react');\nvar GridItem = require('./GridItem');\nvar utils = require('./utils');\nvar PureDeepRenderMixin = require('./mixins/PureDeepRenderMixin');\nvar WidthListeningMixin = require('./mixins/WidthListeningMixin');\n\n/**\n * A reactive, fluid grid layout with draggable, resizable components.\n */\nvar ReactGridLayout = React.createClass({\n  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\n  propTypes: {\n    //\n    // Basic props\n    //\n\n    // If true, the container height swells and contracts to fit contents\n    autoSize: React.PropTypes.bool,\n    // # of cols.\n    cols: React.PropTypes.number,\n\n    // A selector that will not be draggable.\n    draggableCancel: React.PropTypes.string,\n    // A selector for the draggable handler\n    draggableHandle: React.PropTypes.string,\n\n    // If true, the layout will compact vertically\n    verticalCompact: React.PropTypes.bool,\n\n    // layout is an array of object with the format:\n    // {x: Number, y: Number, w: Number, h: Number}\n    layout: function(props, propName, componentName) {\n      var layout = props.layout;\n      // I hope you're setting the _grid property on the grid items\n      if (layout === undefined) return;\n      utils.validateLayout(layout, 'layout');\n    },\n\n    layouts: function(props, propName, componentName) {\n      if (props.layouts) {\n        throw new Error(\"ReactGridLayout does not use `layouts`: Use ReactGridLayout.Responsive.\");\n      }\n    },\n\n    // margin between items [x, y] in px\n    margin: React.PropTypes.array,\n    // Rows have a static height, but you can change this based on breakpoints if you like\n    rowHeight: React.PropTypes.number,\n    maxRows: React.PropTypes.number,\n\n    //\n    // Flags\n    //\n    isDraggable: React.PropTypes.bool,\n    isResizable: React.PropTypes.bool,\n    // Use CSS transforms instead of top/left\n    useCSSTransforms: React.PropTypes.bool,\n\n    //\n    // Callbacks\n    //\n\n    // Callback so you can save the layout.\n    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n    onLayoutChange: React.PropTypes.func,\n\n    // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e).\n    // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n    onDragStart: React.PropTypes.func,\n    // Calls on each drag movement.\n    onDrag: React.PropTypes.func,\n    // Calls when drag is complete.\n    onDragStop: React.PropTypes.func,\n    //Calls when resize starts.\n    onResizeStart: React.PropTypes.func,\n    // Calls when resize movement happens.\n    onResize: React.PropTypes.func,\n    // Calls when resize is complete.\n    onResizeStop: React.PropTypes.func,\n\n    //\n    // Other validations\n    //\n\n    // Children must not have duplicate keys.\n    children: function(props, propName, componentName) {\n      React.PropTypes.node.apply(this, arguments);\n      var children = props[propName];\n\n      // Check children keys for duplicates. Throw if found.\n      var keys = {};\n      React.Children.forEach(children, function(child, i, list) {\n        if (keys[child.key]) {\n          throw new Error(\"Duplicate child key found! This will cause problems in ReactGridLayout.\");\n        }\n        keys[child.key] = true;\n      });\n    }\n  },\n\n  getDefaultProps() {\n    return {\n      autoSize: true,\n      cols: 12,\n      rowHeight: 150,\n      layout: [],\n      margin: [10, 10],\n      isDraggable: true,\n      isResizable: true,\n      useCSSTransforms: true,\n      verticalCompact: true,\n      maxRows: Infinity,\n      onLayoutChange: function(){},\n      onDragStart: function() {},\n      onDrag: function() {},\n      onDragStop: function() {},\n      onResizeStart: function() {},\n      onResize: function() {},\n      onResizeStop: function() {}\n    };\n  },\n\n  getInitialState() {\n    return {\n      activeDrag: null,\n      isMounted: false,\n      layout: utils.synchronizeLayoutWithChildren(this.props.layout, this.props.children, this.props.cols, this.props.verticalCompact),\n      width: this.props.initialWidth\n    };\n  },\n\n  componentDidMount() {\n    // Call back with layout on mount. This should be done after correcting the layout width\n    // to ensure we don't rerender with the wrong width.\n    this.props.onLayoutChange(this.state.layout);\n    this.setState({isMounted: true});\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // This allows you to set the width manually if you like.\n    // Use manual width changes in combination with `listenToWindowResize: false`\n    if (nextProps.width !== this.props.width) this.onWidthChange(nextProps.width);\n\n    // If children change, regenerate the layout.\n    if (nextProps.children.length !== this.props.children.length) {\n      this.setState({\n        layout: utils.synchronizeLayoutWithChildren(this.state.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n      });\n    }\n\n    // Allow parent to set layout directly.\n    if (nextProps.layout && JSON.stringify(nextProps.layout) !== JSON.stringify(this.state.layout)) {\n      this.setState({\n        layout: utils.synchronizeLayoutWithChildren(nextProps.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n      });\n    }\n  },\n\n  componentDidUpdate(prevProps, prevState) {\n    // Call back so we can store the layout\n    // Do it only when a resize/drag is not active, otherwise there are way too many callbacks\n    if (this.state.layout !== prevState.layout && !this.state.activeDrag) {\n      this.props.onLayoutChange(this.state.layout, this.state.layouts);\n    }\n  },\n\n  /**\n   * Calculates a pixel value for the container.\n   * @return {String} Container height in pixels.\n   */\n  containerHeight() {\n    if (!this.props.autoSize) return;\n    return utils.bottom(this.state.layout) * this.props.rowHeight + this.props.margin[1] + 'px';\n  },\n\n  /**\n   * When the width changes, save it to state. This helps with left/width calculations.\n   */\n  onWidthChange(width) {\n    this.setState({width: width});\n  },\n\n  /**\n   * When dragging starts\n   * @param {Number} i Index of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} element The current dragging DOM element\n   * @param {Object} position Drag information\n   */\n  onDragStart(i, x, y, {e, element, position}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n\n    // No need to clone, `l` hasn't changed.\n    this.props.onDragStart(layout, l, l, null, e);\n  },\n  /**\n   * Each drag movement create a new dragelement and move the element to the dragged location\n   * @param {Number} i Index of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} element The current dragging DOM element\n   * @param {Object} position Drag information\n   */\n  onDrag(i, x, y, {e, element, position}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    // Clone layout item so we can pass it to the callback.\n    var oldL = utils.clone(l);\n\n    // Create placeholder (display only)\n    var placeholder = {\n      w: l.w, h: l.h, x: l.x, y: l.y, placeholder: true, i: i\n    };\n\n    // Move the element to the dragged location.\n    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\n    this.props.onDrag(layout, oldL, l, placeholder, e);\n\n\n    this.setState({\n      layout: utils.compact(layout, this.props.verticalCompact),\n      activeDrag: placeholder\n    });\n  },\n\n  /**\n   * When dragging stops, figure out which position the element is closest to and update its x and y.\n   * @param  {Number} i Index of the child.\n   * @param {Number} i Index of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} element The current dragging DOM element\n   * @param {Object} position Drag information\n   */\n  onDragStop(i, x, y, {e, element, position}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = utils.clone(l);\n\n    // Move the element here\n    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\n    this.props.onDragStop(layout, oldL, l, null, e);\n\n    // Set state\n    this.setState({ layout: utils.compact(layout, this.props.verticalCompact), activeDrag: null });\n  },\n\n  onResizeStart(i, w, h, {e, element, size}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n\n    // No need to clone, item hasn't changed\n    this.props.onResizeStart(layout, l, l, null, e);\n  },\n\n  onResize(i, w, h, {e, element, size}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = utils.clone(l);\n\n    // Set new width and height.\n    l.w = w;\n    l.h = h;\n\n    // Create placeholder element (display only)\n    var placeholder = {\n      w: w, h: h, x: l.x, y: l.y, placeholder: true, i: i\n    };\n\n    this.props.onResize(layout, oldL, l, placeholder, e);\n\n    // Re-compact the layout and set the drag placeholder.\n    this.setState({ layout: utils.compact(layout, this.props.verticalCompact), activeDrag: placeholder });\n  },\n\n  onResizeStop(i, x, y, {e, element, size}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = utils.clone(l);\n\n    this.props.onResizeStop(layout, oldL, l, null, e);\n\n    this.setState({ activeDrag: null, layout: utils.compact(layout, this.props.verticalCompact) });\n  },\n\n  /**\n   * Create a placeholder object.\n   * @return {Element} Placeholder div.\n   */\n  placeholder() {\n    if (!this.state.activeDrag) return '';\n\n    // {...this.state.activeDrag} is pretty slow, actually\n    return (\n      <GridItem\n        w={this.state.activeDrag.w}\n        h={this.state.activeDrag.h}\n        x={this.state.activeDrag.x}\n        y={this.state.activeDrag.y}\n        i={this.state.activeDrag.i}\n        isPlaceholder={true}\n        className=\"react-grid-placeholder\"\n        containerWidth={this.state.width}\n        maxRows={this.props.maxRows}\n        cols={this.props.cols}\n        margin={this.props.margin}\n        rowHeight={this.props.rowHeight}\n        isDraggable={false}\n        isResizable={false}\n        useCSSTransforms={this.props.useCSSTransforms}\n        >\n        <div />\n      </GridItem>\n    );\n  },\n\n  /**\n   * Given a grid item, set its style attributes & surround in a <Draggable>.\n   * @param  {Element} child React element.\n   * @param  {Number}  i     Index of element.\n   * @return {Element}       Element wrapped in draggable and properly placed.\n   */\n  processGridItem(child) {\n    var i = child.key;\n    var l = utils.getLayoutItem(this.state.layout, i);\n\n    // watchStart property tells Draggable to react to changes in the start param\n    // Must be turned off on the item we're dragging as the changes in `activeDrag` cause rerenders\n    var drag = this.state.activeDrag;\n    var moveOnStartChange = drag && drag.i === i ? false : true;\n\n    // Parse 'static'. Any properties defined directly on the grid item will take precedence.\n    var draggable, resizable;\n    if (l.static || this.props.isDraggable === false) draggable = false;\n    if (l.static || this.props.isResizable === false) resizable = false;\n\n    return (\n      <GridItem\n        containerWidth={this.state.width}\n        cols={this.props.cols}\n        margin={this.props.margin}\n        rowHeight={this.props.rowHeight}\n        moveOnStartChange={moveOnStartChange}\n        cancel={this.props.draggableCancel}\n        handle={this.props.draggableHandle}\n        maxRows={this.props.maxRows}\n        onDragStop={this.onDragStop}\n        onDragStart={this.onDragStart}\n        onDrag={this.onDrag}\n        onResizeStart={this.onResizeStart}\n        onResize={this.onResize}\n        onResizeStop={this.onResizeStop}\n        isDraggable={draggable}\n        isResizable={resizable}\n        useCSSTransforms={this.props.useCSSTransforms && this.state.isMounted}\n        usePercentages={!this.state.isMounted}\n        {...l}\n        >\n        {child}\n      </GridItem>\n    );\n  },\n\n  render() {\n    // Calculate classname\n    var {className, ...props} = this.props;\n    className = 'react-grid-layout ' + (className || '');\n\n    return (\n      <div {...props} className={className} style={{height: this.containerHeight()}}>\n        {React.Children.map(this.props.children, this.processGridItem)}\n        {this.placeholder()}\n      </div>\n    );\n  }\n});\n\nmodule.exports = ReactGridLayout;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/ReactGridLayout.jsx\n **/","'use strict';\nvar React = require('react');\n\n/**\n * A simple mixin that provides facility for listening to container resizes.\n */\nvar WidthListeningMixin = {\n\n  propTypes: {\n    // This allows setting this on the server side\n    initialWidth: React.PropTypes.number,\n\n    // If false, you should supply width yourself. Good if you want to debounce resize events\n    // or reuse a handler from somewhere else.\n    listenToWindowResize: React.PropTypes.bool\n  },\n\n  getDefaultProps: function() {\n    return {\n      initialWidth: 1280,\n      listenToWindowResize: true\n    };\n  },\n\n  componentDidMount: function() {\n    if (this.props.listenToWindowResize) {\n      window.addEventListener('resize', this.onWindowResize);\n      // This is intentional. Once to properly set the breakpoint and resize the elements,\n      // and again to compensate for any scrollbar that appeared because of the first step.\n      this.onWindowResize();\n      this.onWindowResize();\n    }\n  },\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onWindowResize);\n  },\n\n  /**\n   * On window resize, update width.\n   */\n  onWindowResize: function() {\n    this.onWidthChange(this.getDOMNode().offsetWidth);\n  }\n\n};\n\nmodule.exports = WidthListeningMixin;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/mixins/WidthListeningMixin.js\n **/","'use strict';\n\nfunction ToObject(val) {\n\tif (val == null) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nmodule.exports = Object.assign || function (target, source) {\n\tvar from;\n\tvar keys;\n\tvar to = ToObject(target);\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = arguments[s];\n\t\tkeys = Object.keys(Object(from));\n\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tto[keys[i]] = from[keys[i]];\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/object-assign/index.js\n ** module id = 8\n ** module chunks = 0\n **/","module.exports = require('./lib/draggable');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-draggable/index.js\n ** module id = 9\n ** module chunks = 0\n **/","'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar React = require('react');\nvar Draggable = require('react-draggable');\nvar PureRenderMixin = require('react/lib/ReactComponentWithPureRenderMixin');\nvar assign = require('object-assign');\nvar cloneWithProps = require('react/lib/cloneWithProps');\n\nvar Resizable = module.exports = React.createClass({\n  displayName: 'Resizable',\n  mixins: [PureRenderMixin],\n\n  propTypes: {\n    // Require that one and only one child be present.\n    children: React.PropTypes.element.isRequired,\n    // Functions\n    onResizeStop: React.PropTypes.func,\n    onResizeStart: React.PropTypes.func,\n    onResize: React.PropTypes.func,\n\n    width: React.PropTypes.number.isRequired,\n    height: React.PropTypes.number.isRequired,\n    // If you change this, be sure to update your css\n    handleSize: React.PropTypes.array,\n    // These will be passed wholesale to react-draggable\n    draggableOpts: React.PropTypes.object\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      handleSize: [20, 20]\n    };\n  },\n\n  minConstraints: function minConstraints() {\n    return parseConstraints(this.props.minConstraints, this.props.handleSize) || this.props.handleSize;\n  },\n\n  maxConstraints: function maxConstraints() {\n    return parseConstraints(this.props.maxConstraints, this.props.handleSize);\n  },\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  resizeHandler: function resizeHandler(handlerName) {\n    var me = this;\n    return function (e, _ref) {\n      var element = _ref.element;\n      var position = _ref.position;\n\n      me.props[handlerName] && me.props[handlerName](e, { element: element, size: calcWH(position, me.props.handleSize) });\n    };\n  },\n\n  render: function render() {\n    var p = this.props;\n\n    // What we're doing here is getting the child of this element, and cloning it with this element's props.\n    // We are then defining its children as:\n    // Its original children (resizable's child's children), and\n    // A draggable handle.\n    return cloneWithProps(p.children, assign({}, p, {\n      children: [p.children.props.children, React.createElement(\n        Draggable,\n        _extends({}, p.draggableOpts, {\n          start: { x: p.width - 20, y: p.height - 20 },\n          moveOnStartChange: true,\n          onStop: this.resizeHandler('onResizeStop'),\n          onStart: this.resizeHandler('onResizeStart'),\n          onDrag: this.resizeHandler('onResize'),\n          minConstraints: this.minConstraints(),\n          maxConstraints: this.maxConstraints()\n        }),\n        React.createElement('span', { className: 'react-resizable-handle' })\n      )]\n    }));\n  }\n});\n\n/**\n * Parse left and top coordinates; we have to add the handle size to get the full picture.\n * @param  {Number} options.left Left coordinate.\n * @param  {Number} options.top  Top coordinate.\n * @param  {Array}  handleSize   Handle data.\n * @return {Object}              Coordinates\n */\nfunction calcWH(_ref2, handleSize) {\n  var left = _ref2.left;\n  var top = _ref2.top;\n\n  return { width: left + handleSize[0], height: top + handleSize[1] };\n}\n\n/**\n * Constraints must be subtracted by the size of the handle to work properly.\n * This has a side-effect of effectively limiting the minimum size to the handleSize,\n * which IMO is fine.\n * @param  {Array} constraints Constraints array.\n * @param  {Array} handleSize  Handle size array.\n * @return {Array}             Transformed constraints.\n */\nfunction parseConstraints(constraints, handleSize) {\n  if (!constraints) return;\n  return constraints.map(function (c, i) {\n    return c - handleSize[i];\n  });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-resizable/build/Resizable.js\n ** module id = 10\n ** module chunks = 0\n **/","'use strict';\nvar React = require('react');\nvar cloneWithProps = require('react/lib/cloneWithProps');\nvar utils = require('./utils');\nvar Draggable = require('react-draggable');\nvar Resizable = require('react-resizable').Resizable;\nvar PureDeepRenderMixin = require('./mixins/PureDeepRenderMixin');\n\n/**\n * An individual item within a ReactGridLayout.\n */\nvar GridItem = React.createClass({\n  mixins: [PureDeepRenderMixin],\n\n  propTypes: {\n    // Children must be only a single element\n    children: React.PropTypes.element,\n\n    // General grid attributes\n    cols: React.PropTypes.number.isRequired,\n    containerWidth: React.PropTypes.number.isRequired,\n    rowHeight: React.PropTypes.number.isRequired,\n    margin: React.PropTypes.array.isRequired,\n    maxRows: React.PropTypes.number.isRequired,\n\n    // These are all in grid units\n    x: React.PropTypes.number.isRequired,\n    y: React.PropTypes.number.isRequired,\n    w: React.PropTypes.number.isRequired,\n    h: React.PropTypes.number.isRequired,\n\n    // All optional\n    minW: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.minW > props.w || props.minW > props.maxW) constraintError('minW', props);\n    },\n    maxW: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.maxW < props.w || props.maxW < props.minW) constraintError('maxW', props);\n    },\n    minH: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.minH > props.h || props.minH > props.maxH) constraintError('minH', props);\n    },\n    maxH: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.maxH < props.h || props.maxH < props.minH) constraintError('maxH', props);\n    },\n\n    // ID is nice to have for callbacks\n    i: React.PropTypes.string.isRequired,\n\n    // If true, item will be repositioned when x/y/w/h change\n    moveOnStartChange: React.PropTypes.bool,\n\n    // Functions\n    onDragStop: React.PropTypes.func,\n    onDragStart: React.PropTypes.func,\n    onDrag: React.PropTypes.func,\n    onResizeStop: React.PropTypes.func,\n    onResizeStart: React.PropTypes.func,\n    onResize: React.PropTypes.func,\n\n    // Flags\n    isDraggable: React.PropTypes.bool,\n    isResizable: React.PropTypes.bool,\n    // Use CSS transforms instead of top/left\n    useCSSTransforms: React.PropTypes.bool,\n    isPlaceholder: React.PropTypes.bool,\n\n    // Others\n    className: React.PropTypes.string,\n    // Selector for draggable handle\n    handle: React.PropTypes.string,\n    // Selector for draggable cancel (see react-draggable)\n    cancel: React.PropTypes.string\n  },\n\n  getDefaultProps() {\n    return {\n      isDraggable: true,\n      isResizable: true,\n      useCSSTransforms: true,\n      className: '',\n      cancel: '',\n      minH: 1,\n      minW: 1,\n      maxH: Infinity,\n      maxW: Infinity\n    };\n  },\n\n  getInitialState() {\n    return {\n      resizing: false,\n      className: ''\n    };\n  },\n\n  /**\n   * Return position on the page given an x, y, w, h.\n   * left, top, width, height are all in pixels.\n   * @param  {Number}  x             X coordinate in grid units.\n   * @param  {Number}  y             Y coordinate in grid units.\n   * @param  {Number}  w             W coordinate in grid units.\n   * @param  {Number}  h             H coordinate in grid units.\n   * @return {Object}                Object containing coords.\n   */\n  calcPosition(x, y, w, h) {\n    var p = this.props;\n    var width = p.containerWidth - p.margin[0];\n    var out = {\n      left: width * (x / p.cols) + p.margin[0],\n      top: p.rowHeight * y + p.margin[1],\n      width: width * (w / p.cols) - p.margin[0],\n      height: h * p.rowHeight - p.margin[1]\n    };\n    return out;\n  },\n\n  /**\n   * Translate x and y coordinates from pixels to grid units.\n   * @param  {Number} options.left  Left offset in pixels.\n   * @param  {Number} options.top   Top offset in pixels.\n   * @return {Object}               x and y in grid units.\n   */\n  calcXY({left, top}) {\n    left = left - this.props.margin[0];\n    top = top - this.props.margin[1];\n    var maxRows = this.props.maxRows;\n    var h = this.props.h;\n    // This is intentional; because so much of the logic on moving boxes up/down relies\n    // on an exact y position, we only round the x, not the y.\n    var x = Math.round((left / this.props.containerWidth) * this.props.cols);\n    var y = Math.floor(top / this.props.rowHeight);\n    x = Math.max(Math.min(x, this.props.cols), 0);\n    y = Math.max(Math.min(y, maxRows - h), 0);\n    return {x, y};\n  },\n\n  /**\n   * Given a height and width in pixel values, calculate grid units.\n   * @param  {Number} options.height Height in pixels.\n   * @param  {Number} options.width  Width in pixels.\n   * @return {Object}                w, h as grid units.\n   */\n  calcWH({height, width}) {\n    width = width + this.props.margin[0];\n    height = height + this.props.margin[1];\n    var maxRows = this.props.maxRows;\n    var y = this.props.y;\n    var w = Math.round((width / this.props.containerWidth) * this.props.cols);\n    var h = Math.round(height / this.props.rowHeight);\n    w = Math.max(Math.min(w, this.props.cols - this.props.x), 0);\n    h = Math.max(Math.min(h, maxRows - y), 0);\n    return {w, h};\n  },\n\n  /**\n   * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it\n   * well when server rendering, and the only way to do that properly is to use percentage width/left because\n   * we don't know exactly what the browser viewport is.\n   * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage\n   * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.\n   *\n   * @param  {Object} pos Position object with width, height, left, top.\n   * @return {Object}     Style object.\n   */\n  createStyle(pos) {\n    var style = {\n      width: pos.width + 'px',\n      height: pos.height + 'px',\n      left: pos.left + 'px',\n      top: pos.top + 'px',\n      position: 'absolute'\n    };\n\n    // This is used for server rendering.\n    if (this.props.usePercentages) {\n      pos.left = utils.perc(pos.left / this.props.containerWidth);\n      style.left = pos.left;\n      style.width = utils.perc(pos.width / this.props.containerWidth);\n    }\n\n    // CSS Transforms support\n    if (this.props.useCSSTransforms) {\n      utils.setTransform(style, [pos.left, pos.top]);\n      delete style.left;\n      delete style.top;\n    }\n\n    return style;\n  },\n\n  /**\n   * Mix a Draggable instance into a child.\n   * @param  {Element} child    Child element.\n   * @param  {Object} position  Position object (pixel values)\n   * @return {Element}          Child wrapped in Draggable.\n   */\n  mixinDraggable(child, position) {\n    return (\n      <Draggable\n        start={{x: position.left, y: position.top}}\n        moveOnStartChange={this.props.moveOnStartChange}\n        onStop={this.onDragHandler('onDragStop')}\n        onStart={this.onDragHandler('onDragStart')}\n        onDrag={this.onDragHandler('onDrag')}\n        handle={this.props.handle}\n        cancel={\".react-resizable-handle \" + this.props.cancel}\n        useCSSTransforms={this.props.useCSSTransforms}\n        >\n        {child}\n      </Draggable>\n    );\n  },\n\n  /**\n   * Mix a Resizable instance into a child.\n   * @param  {Element} child    Child element.\n   * @param  {Object} position  Position object (pixel values)\n   * @return {Element}          Child wrapped in Resizable.\n   */\n  mixinResizable(child, position) {\n    var p = this.props;\n    // This is the max possible width - doesn't go to infinity because of the width of the window\n    var maxWidth = this.calcPosition(0, 0, p.cols - p.x, 0).width;\n\n    // Calculate min/max constraints using our min & maxes\n    var mins = this.calcPosition(0, 0, p.minW, p.minH);\n    var maxes = this.calcPosition(0, 0, p.maxW, p.maxH);\n    var minConstraints = [mins.width, mins.height];\n    var maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];\n    return (\n      <Resizable\n        width={position.width}\n        height={position.height}\n        minConstraints={minConstraints}\n        maxConstraints={maxConstraints}\n        onResizeStop={this.onResizeHandler('onResizeStop')}\n        onResizeStart={this.onResizeHandler('onResizeStart')}\n        onResize={this.onResizeHandler('onResize')}\n        >\n        {child}\n      </Resizable>\n    );\n  },\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   * All drag events call the function with the given handler name,\n   * with the signature (index, x, y).\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  onDragHandler(handlerName) {\n    var me = this;\n    return function(e, {element, position}) {\n      if (!me.props[handlerName]) return;\n      // Get new XY\n      var {x, y} = me.calcXY(position);\n\n      // Cap x at numCols\n      x = Math.min(x, me.props.cols - me.props.w);\n\n      me.props[handlerName](me.props.i, x, y, {e, element, position});\n    };\n  },\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   * All drag events call the function with the given handler name,\n   * with the signature (index, x, y).\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  onResizeHandler(handlerName) {\n    var me = this;\n    return function(e, {element, size}) {\n      if (!me.props[handlerName]) return;\n\n      // Get new XY\n      var {w, h} = me.calcWH(size);\n\n      // Cap w at numCols\n      w = Math.min(w, me.props.cols - me.props.x);\n      // Ensure w is at least 1\n      w = Math.max(w, 1);\n\n      // Min/max capping\n      w = Math.max(Math.min(w, me.props.maxW), me.props.minW);\n      h = Math.max(Math.min(h, me.props.maxH), me.props.minH);\n\n      me.setState({resizing: handlerName === 'onResizeStop' ? null : size});\n\n      me.props[handlerName](me.props.i, w, h, {e, element, size});\n    };\n  },\n\n  render() {\n    var p = this.props, pos = this.calcPosition(p.x, p.y, p.w, p.h);\n    if (this.state.resizing) {\n      pos.width = this.state.resizing.width;\n      pos.height = this.state.resizing.height;\n    }\n\n    // Create the child element. We clone the existing element but modify its className and style.\n    var child = cloneWithProps(this.props.children, {\n      // Munge a classname. Use passed in classnames and resizing.\n      // React with merge the classNames.\n      className: ['react-grid-item', this.props.className, this.state.resizing ? 'resizing' : '',\n        this.props.useCSSTransforms ? 'cssTransforms' : ''].join(' '),\n      // We can set the width and height on the child, but unfortunately we can't set the position.\n      style: this.createStyle(pos)\n    });\n\n    // Resizable support. This is usually on but the user can toggle it off.\n    if (this.props.isResizable) {\n      child = this.mixinResizable(child, pos);\n    }\n\n    // Draggable support. This is always on, except for with placeholders.\n    if (this.props.isDraggable) {\n      child = this.mixinDraggable(child, pos);\n    }\n\n    return child;\n  }\n});\n\nfunction constraintError(name, props) {\n  delete props.children;\n  throw new Error(name + ' overrides contraints on gridItem ' + props.i + '. Full props: ' + JSON.stringify(props));\n}\n\nmodule.exports = GridItem;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/GridItem.jsx\n **/","'use strict';\nvar React = require('react');\nvar utils = require('./utils');\nvar responsiveUtils = require('./responsiveUtils');\nvar PureDeepRenderMixin = require('./mixins/PureDeepRenderMixin');\nvar WidthListeningMixin = require('./mixins/WidthListeningMixin');\nvar ReactGridLayout = require('./ReactGridLayout');\n\n/**\n * A wrapper around ReactGridLayout to support responsive breakpoints.\n */\nvar ResponsiveReactGridLayout = React.createClass({\n  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\n  propTypes: {\n    //\n    // Basic props\n    //\n\n    // Optional, but if you are managing width yourself you may want to set the breakpoint\n    // yourself as well.\n    breakpoint: React.PropTypes.string,\n\n    // {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}\n    breakpoints: React.PropTypes.object,\n\n    // # of cols. This is a breakpoint -> cols map\n    cols: React.PropTypes.object,\n\n    // layouts is an object mapping breakpoints to layouts.\n    // e.g. {lg: Layout, md: Layout, ...}\n    layouts: function(props, propName, componentName) {\n      React.PropTypes.object.isRequired.apply(this, arguments);\n\n      var layouts = props.layouts;\n      Object.keys(layouts).map(function(k) {\n        utils.validateLayout(layouts[k], 'layouts.' + k);\n      });\n    },\n\n    //\n    // Callbacks\n    //\n\n    // Calls back with breakpoint and new # cols\n    onBreakpointChange: React.PropTypes.func,\n\n    // Callback so you can save the layout.\n    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n    onLayoutChange: React.PropTypes.func\n  },\n\n  getDefaultProps() {\n    return {\n      breakpoints: {lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0},\n      cols: {lg: 12, md: 10, sm: 6, xs: 4, xxs: 2},\n      layouts: {},\n      onBreakpointChange: function(){},\n      onLayoutChange: function(){}\n    };\n  },\n\n  getInitialState() {\n    var breakpoint = this.props.breakpoint ||\n      responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, this.props.initialWidth);\n    var cols = responsiveUtils.getColsFromBreakpoint(breakpoint, this.props.cols);\n\n    // Get the initial layout. This can tricky; we try to generate one however possible if one doesn't exist\n    // for this layout.\n    var initialLayout = responsiveUtils.findOrGenerateResponsiveLayout(\n      this.props.layouts, this.props.breakpoints, breakpoint, breakpoint, cols, this.props.verticalCompact);\n\n    return {\n      layout: initialLayout,\n      // storage for layouts obsoleted by breakpoints\n      layouts: this.props.layouts || {},\n      breakpoint: breakpoint,\n      cols: cols,\n      width: this.props.initialWidth\n    };\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // This allows you to set the width manually if you like.\n    // Use manual width changes in combination with `listenToWindowResize: false`\n    if (nextProps.width) this.onWidthChange(nextProps.width);\n\n    // Allow parent to set breakpoint directly.\n    if (nextProps.breakpoint !== this.props.breakpoint) {\n      this.onWidthChange(this.state.width);\n    }\n\n    // Allow parent to set layouts directly.\n    if (nextProps.layouts && nextProps.layouts !== this.state.layouts) {\n      // Since we're setting an entirely new layout object, we must generate a new responsive layout\n      // if one does not exist.\n      var newLayout = responsiveUtils.findOrGenerateResponsiveLayout(\n        nextProps.layouts, nextProps.breakpoints, this.state.breakpoint, this.state.breakpoint, this.state.cols, this.props.verticalLayout);\n\n      this.setState({\n        layouts: nextProps.layouts,\n        layout: newLayout\n      });\n    }\n  },\n\n  /**\n   * Bubble this up, add `layouts` object.\n   * @param  {Array} layout Layout from inner Grid.\n   */\n  onLayoutChange(layout) {\n    this.state.layouts[this.state.breakpoint] = layout;\n    this.setState({layout: layout, layouts: this.state.layouts});\n    this.props.onLayoutChange(layout, this.state.layouts);\n  },\n\n  /**\n   * When the width changes work through breakpoints and reset state with the new width & breakpoint.\n   * Width changes are necessary to figure out the widget widths.\n   */\n  onWidthChange(width) {\n    // Set new breakpoint\n    var newState = {width: width};\n    newState.breakpoint = this.props.breakpoint ||\n      responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, newState.width);\n    newState.cols = responsiveUtils.getColsFromBreakpoint(newState.breakpoint, this.props.cols);\n\n    // Breakpoint change\n    if (newState.cols !== this.state.cols) {\n\n      // Store the current layout\n      newState.layouts = this.state.layouts;\n      newState.layouts[this.state.breakpoint] = JSON.parse(JSON.stringify(this.state.layout));\n\n      // Find or generate a new one.\n      newState.layout = responsiveUtils.findOrGenerateResponsiveLayout(\n        newState.layouts, this.props.breakpoints, newState.breakpoint, this.state.breakpoint, newState.cols, this.props.verticalLayout);\n\n      // This adds missing items.\n      newState.layout = utils.synchronizeLayoutWithChildren(newState.layout, this.props.children, newState.cols, this.props.verticalCompact);\n\n      // Store this new layout as well.\n      newState.layouts[newState.breakpoint] = newState.layout;\n\n      this.props.onBreakpointChange(newState.breakpoint, newState.cols);\n    }\n\n    this.setState(newState);\n  },\n\n\n  render() {\n    // Don't pass responsive props to RGL.\n    /*jshint unused:false*/\n    var {layouts, onBreakpointChange, breakpoints, ...props} = this.props;\n    return (\n      <ReactGridLayout {...props}\n          layout={this.state.layout}\n          cols={this.state.cols}\n          listenToWindowResize={false}\n          onLayoutChange={this.onLayoutChange}\n          width={this.state.width}>\n        {this.props.children}\n      </ReactGridLayout>\n    );\n  }\n});\n\nmodule.exports = ResponsiveReactGridLayout;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/ResponsiveReactGridLayout.jsx\n **/","'use strict';\n\nvar utils = require('./utils');\n\nvar responsiveUtils = module.exports = {\n\n  /**\n   * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).\n   *\n   * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})\n   * @param  {Number} width Screen width.\n   * @return {String}       Highest breakpoint that is less than width.\n   */\n  getBreakpointFromWidth(breakpoints, width) {\n    var sorted = responsiveUtils.sortBreakpoints(breakpoints);\n    var matching = sorted[0];\n    for (var i = 1, len = sorted.length; i < len; i++) {\n      var breakpointName = sorted[i];\n      if (width > breakpoints[breakpointName]) matching = breakpointName;\n    }\n    return matching;\n  },\n\n\n  /**\n   * Given a breakpoint, get the # of cols set for it.\n   * @param  {String} breakpoint Breakpoint name.\n   * @param  {Object} cols       Map of breakpoints to cols.\n   * @return {Number}            Number of cols.\n   */\n  getColsFromBreakpoint(breakpoint, cols) {\n    if (!cols[breakpoint]) {\n      throw new Error(\"ResponsiveReactGridLayout: `cols` entry for breakpoint \" + breakpoint + \" is missing!\");\n    }\n    return cols[breakpoint];\n  },\n\n  /**\n   * Given existing layouts and a new breakpoint, find or generate a new layout.\n   *\n   * This finds the layout above the new one and generates from it, if it exists.\n   *\n   * @param  {Array} layouts     Existing layouts.\n   * @param  {Array} breakpoints All breakpoints.\n   * @param  {String} breakpoint New breakpoint.\n   * @param  {String} breakpoint Last breakpoint (for fallback).\n   * @param  {Number} cols       Column count at new breakpoint.\n   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n   *   vertically.\n   * @return {Array}             New layout.\n   */\n  findOrGenerateResponsiveLayout(layouts, breakpoints, breakpoint, lastBreakpoint, cols, verticalCompact) {\n    // If it already exists, just return it.\n    if (layouts[breakpoint]) return layouts[breakpoint];\n    // Find or generate the next layout\n    var layout = layouts[lastBreakpoint];\n    var breakpointsSorted = responsiveUtils.sortBreakpoints(breakpoints);\n    var breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));\n    for (var i = 0, len = breakpointsAbove.length; i < len; i++) {\n      var b = breakpointsAbove[i];\n      if (layouts[b]) {\n        layout = layouts[b];\n        break;\n      }\n    }\n    layout = JSON.parse(JSON.stringify(layout || [])); // clone layout so we don't modify existing items\n    return utils.compact(utils.correctBounds(layout, {cols: cols}), verticalCompact);\n  },\n\n\n  /**\n   * Given breakpoints, return an array of breakpoints sorted by width. This is usually\n   * e.g. ['xxs', 'xs', 'sm', ...]\n   *\n   * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.\n   * @return {Array}              Sorted breakpoints.\n   */\n  sortBreakpoints(breakpoints) {\n    var keys = Object.keys(breakpoints);\n    return keys.sort(function(a, b) {\n      return breakpoints[a] - breakpoints[b];\n    });\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/responsiveUtils.js\n **/","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deep-equal/index.js\n ** module id = 14\n ** module chunks = 0\n **/","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deep-equal/lib/is_arguments.js\n ** module id = 15\n ** module chunks = 0\n **/","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deep-equal/lib/keys.js\n ** module id = 16\n ** module chunks = 0\n **/","'use strict';\n\nvar React = require('react');\nvar PureRenderMixin = require('react/lib/ReactComponentWithPureRenderMixin');\nvar emptyFunction = function(){};\nvar cloneWithProps = require('react/lib/cloneWithProps');\n\nfunction createUIEvent(draggable) {\n\treturn {\n\t\telement: draggable.getDOMNode(),\n\t\tposition: {\n\t\t\ttop: (draggable._pendingState || draggable.state).clientY,\n\t\t\tleft: (draggable._pendingState || draggable.state).clientX\n\t\t}\n\t};\n}\n\nfunction canDragY(draggable) {\n\treturn draggable.props.axis === 'both' ||\n\t\t\tdraggable.props.axis === 'y';\n}\n\nfunction canDragX(draggable) {\n\treturn draggable.props.axis === 'both' ||\n\t\t\tdraggable.props.axis === 'x';\n}\n\nfunction isFunction(func) {\n  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n}\n\n// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\nfunction findInArray(array, callback) {\n  for (var i = 0, length = array.length, element = null; i < length, element = array[i]; i++) {\n    if (callback.apply(callback, [element, i, array])) return element;\n  }\n}\n\nfunction matchesSelector(el, selector) {\n  var method = findInArray([\n    'matches',\n    'webkitMatchesSelector',\n    'mozMatchesSelector',\n    'msMatchesSelector',\n    'oMatchesSelector'\n  ], function(method){\n    return isFunction(el[method]);\n  });\n\n  return el[method].call(el, selector);\n}\n\nfunction positionToCSSTransform(style) {\n\t// Replace unitless items with px\n\tvar x = ('' + style.left).replace(/(\\d)$/, '$1px');\n\tvar y = ('' + style.top).replace(/(\\d)$/, '$1px');\n\tstyle.transform = 'translate(' + x + ',' + y + ')';\n\tstyle.WebkitTransform = 'translate(' + x + ',' + y + ')';\n\tstyle.OTransform = 'translate(' + x + ',' + y + ')';\n\tstyle.msTransform = 'translate(' + x + ',' + y + ')';\n\tstyle.MozTransform = 'translate(' + x + ',' + y + ')';\n\tdelete style.left;\n\tdelete style.top;\n\treturn style;\n}\n\n// @credits: http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript/4819886#4819886\n/* Conditional to fix node server side rendering of component */\nif (typeof window === 'undefined') {\n    // Do Node Stuff\n    var isTouchDevice = false;\n} else {\n    // Do Browser Stuff\n    var isTouchDevice = 'ontouchstart' in window || // works on most browsers\n      'onmsgesturechange' in window; // works on ie10 on ms surface\n}\n\n// look ::handleDragStart\n//function isMultiTouch(e) {\n//  return e.touches && Array.isArray(e.touches) && e.touches.length > 1\n//}\n\n/**\n * simple abstraction for dragging events names\n * */\nvar dragEventFor = (function () {\n  var eventsFor = {\n    touch: {\n      start: 'touchstart',\n      move: 'touchmove',\n      end: 'touchend'\n    },\n    mouse: {\n      start: 'mousedown',\n      move: 'mousemove',\n      end: 'mouseup'\n    }\n  };\n  return eventsFor['mouse'];\n})();\n\n/**\n * get {clientX, clientY} positions of control\n * */\nfunction getControlPosition(e) {\n  var position = (e.touches && e.touches[0]) || e;\n  return {\n    clientX: position.clientX,\n    clientY: position.clientY\n  };\n}\n\nfunction addEvent(el, event, handler) {\n\tif (!el) { return; }\n\tif (el.attachEvent) {\n\t\tel.attachEvent('on' + event, handler);\n\t} else if (el.addEventListener) {\n\t\tel.addEventListener(event, handler, true);\n\t} else {\n\t\tel['on' + event] = handler;\n\t}\n}\n\nfunction removeEvent(el, event, handler) {\n\tif (!el) { return; }\n\tif (el.detachEvent) {\n\t\tel.detachEvent('on' + event, handler);\n\t} else if (el.removeEventListener) {\n\t\tel.removeEventListener(event, handler, true);\n\t} else {\n\t\tel['on' + event] = null;\n\t}\n}\n\nmodule.exports = React.createClass({\n\tdisplayName: 'Draggable',\n\tmixins: [PureRenderMixin],\n\n\tpropTypes: {\n\t\t/**\n\t\t * `axis` determines which axis the draggable can move.\n\t\t *\n\t\t * 'both' allows movement horizontally and vertically.\n\t\t * 'x' limits movement to horizontal axis.\n\t\t * 'y' limits movement to vertical axis.\n\t\t *\n\t\t * Defaults to 'both'.\n\t\t */\n\t\taxis: React.PropTypes.oneOf(['both', 'x', 'y']),\n\n\t\t/**\n\t\t * `handle` specifies a selector to be used as the handle that initiates drag.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t    \treturn (\n\t\t * \t    \t \t<Draggable handle=\".handle\">\n\t\t * \t    \t \t  <div>\n\t\t * \t    \t \t      <div className=\"handle\">Click me to drag</div>\n\t\t * \t    \t \t      <div>This is some other content</div>\n\t\t * \t    \t \t  </div>\n\t\t * \t    \t\t</Draggable>\n\t\t * \t    \t);\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\thandle: React.PropTypes.string,\n\n\t\t/**\n\t\t * `cancel` specifies a selector to be used to prevent drag initialization.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return(\n\t\t * \t            <Draggable cancel=\".cancel\">\n\t\t * \t                <div>\n\t\t * \t                \t<div className=\"cancel\">You can't drag from here</div>\n\t\t *\t\t\t\t\t\t<div>Dragging here works fine</div>\n\t\t * \t                </div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tcancel: React.PropTypes.string,\n\n\t\t/**\n\t\t * `grid` specifies the x and y that dragging should snap to.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return (\n\t\t * \t            <Draggable grid={[25, 25]}>\n\t\t * \t                <div>I snap to a 25 x 25 grid</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tgrid: React.PropTypes.arrayOf(React.PropTypes.number),\n\n\t\t/**\n\t\t * `start` specifies the x and y that the dragged item should start at\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return (\n\t\t * \t            <Draggable start={{x: 25, y: 25}}>\n\t\t * \t                <div>I start with left: 25px; top: 25px;</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tstart: React.PropTypes.object,\n\n\t\t/**\n\t\t * `moveOnStartChange` tells the Draggable element to reset its position\n\t\t * if the `start` parameters are changed. By default, if the `start`\n\t\t * parameters change, the Draggable element still remains where it started\n\t\t * or was dragged to.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t\t\tonButtonClick: function () {\n\t\t * \t\t\t\tthis.setState({clicked: true});\n\t\t * \t\t\t},\n\t\t * \t    render: function () {\n\t\t * \t    \t\tvar start = this.state.clicked ?\n\t\t * \t    \t\t  {x: 25, y: 25} :\n\t\t * \t    \t\t  {x: 125, y: 125};\n\t\t * \t        return (\n\t\t * \t            <Draggable start={start}>\n\t\t * \t                <div>I start with left: 25px; top: 25px;,\n\t\t * \t                but move to left: 125px; top: 125px; when the button\n\t\t * \t                is clicked.</div>\n\t\t * \t                <div onClick={this.onButtonClick}>Button</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tmoveOnStartChange: React.PropTypes.bool,\n\n\t\t/**\n\t\t * `useCSSTransforms` if true will place the element using translate(x, y)\n\t\t * rather than CSS top/left.\n\t\t *\n\t\t * This generally gives better performance, and is useful in combination with\n\t\t * other layout systems that use translate(), such as react-grid-layout.\n\t\t */\n\t\tuseCSSTransforms: React.PropTypes.bool,\n\n\t\t/**\n\t\t * `zIndex` specifies the zIndex to use while dragging.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return (\n\t\t * \t            <Draggable zIndex={100}>\n\t\t * \t                <div>I have a zIndex</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tzIndex: React.PropTypes.number,\n\n\t\t/**\n\t\t * Called when dragging starts.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```js\n\t\t *\tfunction (event, ui) {}\n\t\t * ```\n\t\t *\n\t\t * `event` is the Event that was triggered.\n\t\t * `ui` is an object:\n\t\t *\n\t\t * ```js\n\t\t *\t{\n\t\t *\t\tposition: {top: 0, left: 0}\n\t\t *\t}\n\t\t * ```\n\t\t */\n\t\tonStart: React.PropTypes.func,\n\n\t\t/**\n\t\t * Called while dragging.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```js\n\t\t *\tfunction (event, ui) {}\n\t\t * ```\n\t\t *\n\t\t * `event` is the Event that was triggered.\n\t\t * `ui` is an object:\n\t\t *\n\t\t * ```js\n\t\t *\t{\n\t\t *\t\tposition: {top: 0, left: 0}\n\t\t *\t}\n\t\t * ```\n\t\t */\n\t\tonDrag: React.PropTypes.func,\n\n\t\t/**\n\t\t * Called when dragging stops.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```js\n\t\t *\tfunction (event, ui) {}\n\t\t * ```\n\t\t *\n\t\t * `event` is the Event that was triggered.\n\t\t * `ui` is an object:\n\t\t *\n\t\t * ```js\n\t\t *\t{\n\t\t *\t\tposition: {top: 0, left: 0}\n\t\t *\t}\n\t\t * ```\n\t\t */\n\t\tonStop: React.PropTypes.func,\n\n\t\t/**\n\t\t * A workaround option which can be passed if onMouseDown needs to be accessed,\n\t\t * since it'll always be blocked (due to that there's internal use of onMouseDown)\n\t\t *\n\t\t */\n\t\tonMouseDown: React.PropTypes.func\n\t},\n\n\tcomponentWillUnmount: function() {\n\t\t// Remove any leftover event handlers\n\t\tremoveEvent(window, dragEventFor['move'], this.handleDrag);\n\t\tremoveEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t},\n\n\tcomponentWillReceiveProps: function(nextProps) {\n\t\t// If this is set to watch a changing start position,\n\t\t// set x and y to the new position.\n\t\tif (nextProps.moveOnStartChange) {\n\t\t\tthis.setState({\n\t\t\t\tclientX: nextProps.start.x,\n\t\t\t\tclientY: nextProps.start.y\n\t\t\t});\n\t\t}\n\t},\n\n\tgetDefaultProps: function () {\n\t\treturn {\n\t\t\taxis: 'both',\n\t\t\thandle: null,\n\t\t\tcancel: null,\n\t\t\tgrid: null,\n\t\t\tstart: {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0\n\t\t\t},\n\t\t\tmoveOnStartChange: false,\n\t\t\tuseCSSTransforms: false,\n\t\t\tzIndex: NaN,\n\t\t\tonStart: emptyFunction,\n\t\t\tonDrag: emptyFunction,\n\t\t\tonStop: emptyFunction,\n\t\t\tonMouseDown: emptyFunction\n\t\t};\n\t},\n\n\tgetInitialState: function () {\n\t\treturn {\n\t\t\t// Whether or not currently dragging\n\t\t\tdragging: false,\n\n\t\t\t// Start top/left of this.getDOMNode()\n\t\t\tstartX: 0, startY: 0,\n\n\t\t\t// Offset between start top/left and mouse top/left\n\t\t\toffsetX: 0, offsetY: 0,\n\n\t\t\t// Current top/left of this.getDOMNode()\n\t\t\tclientX: this.props.start.x, clientY: this.props.start.y\n\t\t};\n\t},\n\n\thandleDragStart: function (e) {\n    // todo: write right implementation to prevent multitouch drag\n    // prevent multi-touch events\n    // if (isMultiTouch(e)) {\n    //     this.handleDragEnd.apply(e, arguments);\n    //     return\n    // }\n\n\t\t// Make it possible to attach event handlers on top of this one\n\t\tthis.props.onMouseDown(e);\n\n\t\t// Only catch left clicks, if clicking\n\t\tif (typeof e.button === \"number\" && e.button !== 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar node = this.getDOMNode();\n\n\t\t// Short circuit if handle or cancel prop was provided and selector doesn't match\n\t\tif ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||\n\t\t\t(this.props.cancel && matchesSelector(e.target, this.props.cancel))) {\n\t\t\treturn;\n\t\t}\n\n    var dragPoint = getControlPosition(e);\n\n\t\t// Initiate dragging\n\t\tthis.setState({\n\t\t\tdragging: true,\n\t\t\toffsetX: parseInt(dragPoint.clientX, 10),\n\t\t\toffsetY: parseInt(dragPoint.clientY, 10),\n\t\t\tstartX: parseInt(this.state.clientX, 10) || 0,\n\t\t\tstartY: parseInt(this.state.clientY, 10) || 0\n\t\t});\n\n\t\t// Add a class to the body to disable user-select. This prevents text from\n\t\t// being selected all over the page.\n\t\tdocument.body.className += \" react-draggable-active\";\n\n\t\t// Call event handler\n\t\tthis.props.onStart(e, createUIEvent(this));\n\n\t\t// Add event handlers\n\t\taddEvent(window, dragEventFor['move'], this.handleDrag);\n\t\taddEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t},\n\n\thandleDragEnd: function (e) {\n\t\t// Short circuit if not currently dragging\n\t\tif (!this.state.dragging) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Turn off dragging\n\t\tthis.setState({\n\t\t\tdragging: false\n\t\t});\n\n\t\t// Remove the body class used to disable user-select.\n\t\tdocument.body.className = document.body.className.replace(\" react-draggable-active\", \"\");\n\n\t\t// Call event handler\n\t\tthis.props.onStop(e, createUIEvent(this));\n\n\t\t// Remove event handlers\n    removeEvent(window, dragEventFor['move'], this.handleDrag);\n    removeEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t},\n\n\thandleDrag: function (e) {\n    var dragPoint = getControlPosition(e);\n\n\t\t// Calculate top and left\n    var clientX = (this.state.startX + (dragPoint.clientX - this.state.offsetX));\n    var clientY = (this.state.startY + (dragPoint.clientY - this.state.offsetY));\n\n\t\t// Snap to grid if prop has been provided\n\t\tif (Array.isArray(this.props.grid)) {\n\t\t\tvar directionX = clientX < parseInt(this.state.clientX, 10) ? -1 : 1;\n\t\t\tvar directionY = clientY < parseInt(this.state.clientY, 10) ? -1 : 1;\n\n\t\t\tclientX = Math.abs(clientX - parseInt(this.state.clientX, 10)) >= this.props.grid[0]\n\t\t\t\t\t? (parseInt(this.state.clientX, 10) + (this.props.grid[0] * directionX))\n\t\t\t\t\t: parseInt(this.state.clientX, 10);\n\n\t\t\tclientY = Math.abs(clientY - parseInt(this.state.clientY, 10)) >= this.props.grid[1]\n\t\t\t\t\t? (parseInt(this.state.clientY, 10) + (this.props.grid[1] * directionY))\n\t\t\t\t\t: parseInt(this.state.clientY, 10);\n\t\t}\n\n\t\t// Min/max constraints\n\t\tif (Array.isArray(this.props.minConstraints)) {\n\t\t\tclientX = Math.max(this.props.minConstraints[0], clientX);\n\t\t\tclientY = Math.max(this.props.minConstraints[1], clientY);\n\t\t}\n\t\tif (Array.isArray(this.props.maxConstraints)) {\n\t\t\tclientX = Math.min(this.props.maxConstraints[0], clientX);\n\t\t\tclientY = Math.min(this.props.maxConstraints[1], clientY);\n\t\t}\n\n\t\t// Update top and left\n\t\tthis.setState({\n\t\t\tclientX: clientX,\n\t\t\tclientY: clientY\n\t\t});\n\n\t\t// Call event handler\n\t\tthis.props.onDrag(e, createUIEvent(this));\n\t},\n\n\trender: function () {\n\t\tvar style = {\n\t\t\t// Set top if vertical drag is enabled\n\t\t\ttop: canDragY(this)\n\t\t\t\t? this.state.clientY\n\t\t\t\t: this.state.startY,\n\n\t\t\t// Set left if horizontal drag is enabled\n\t\t\tleft: canDragX(this)\n\t\t\t\t? this.state.clientX\n\t\t\t\t: this.state.startX\n\t\t};\n\n\t\tif (this.props.useCSSTransforms) {\n\t\t\tstyle = positionToCSSTransform(style);\n\t\t}\n\n\t\t// Set zIndex if currently dragging and prop has been provided\n\t\tif (this.state.dragging && !isNaN(this.props.zIndex)) {\n\t\t\tstyle.zIndex = this.props.zIndex;\n\t\t}\n\n\t\t// Reuse the child provided\n\t\t// This makes it flexible to use whatever element is wanted (div, ul, etc)\n\t\treturn cloneWithProps(React.Children.only(this.props.children), {\n\t\t\tstyle: style,\n\t\t\tclassName: 'react-draggable' + (this.state.dragging ? ' react-draggable-dragging' : ''),\n\n\t\t\tonMouseDown: this.handleDragStart,\n\t\t\tonTouchStart: function(ev){\n        ev.preventDefault(); // prevent for scroll\n        return this.handleDragStart.apply(this, arguments);\n      }.bind(this),\n\n\t\t\tonMouseUp: this.handleDragEnd,\n\t\t\tonTouchEnd: this.handleDragEnd\n\t\t});\n\t}\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-draggable/lib/draggable.js\n ** module id = 17\n ** module chunks = 0\n **/","'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar React = require('react');\nvar Resizable = require('./Resizable');\nvar PureRenderMixin = require('react/lib/ReactComponentWithPureRenderMixin');\n\n// An example use of Resizable.\nvar ResizableBox = module.exports = React.createClass({\n  displayName: 'ResizableBox',\n  mixins: [PureRenderMixin],\n\n  propTypes: {\n    lockAspectRatio: React.PropTypes.bool\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      lockAspectRatio: false,\n      handleSize: [20, 20],\n      minConstraints: [20, 20]\n    };\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      width: this.props.width,\n      height: this.props.height,\n      aspectRatio: this.props.width / this.props.height\n    };\n  },\n\n  onResize: function onResize(event, _ref) {\n    var element = _ref.element;\n    var size = _ref.size;\n    var width = size.width;\n    var height = size.height;\n\n    var widthChanged = width !== this.state.width,\n        heightChanged = height !== this.state.height;\n    if (!widthChanged && !heightChanged) return;\n\n    if (this.props.lockAspectRatio) {\n      var _preserveAspectRatio = this.preserveAspectRatio(width, height);\n\n      var _preserveAspectRatio2 = _slicedToArray(_preserveAspectRatio, 2);\n\n      width = _preserveAspectRatio2[0];\n      height = _preserveAspectRatio2[1];\n    }\n\n    this.setState({\n      width: width,\n      height: height\n    });\n  },\n\n  // If you do this, be careful of constraints\n  preserveAspectRatio: function preserveAspectRatio(width, height) {\n    var min = this.props.minConstraints;\n    var max = this.props.maxConstraints;\n\n    height = width / this.state.aspectRatio;\n    width = height * this.state.aspectRatio;\n\n    if (min) {\n      width = Math.max(min[0], width);\n      height = Math.max(min[1], height);\n    }\n    if (max) {\n      width = Math.min(max[0], width);\n      height = Math.min(max[1], height);\n    }\n    return [width, height];\n  },\n\n  render: function render() {\n    // Basic wrapper around a Resizable instance.\n    // If you use Resizable directly, you are responsible for updating the component\n    // with a new width and height.\n    var _props = this.props;\n    var handleSize = _props.handleSize;\n    var minConstraints = _props.minConstraints;\n    var maxConstraints = _props.maxConstraints;\n\n    var props = _objectWithoutProperties(_props, ['handleSize', 'minConstraints', 'maxConstraints']);\n\n    return React.createElement(\n      Resizable,\n      {\n        minConstraints: minConstraints,\n        maxConstraints: maxConstraints,\n        handleSize: handleSize,\n        width: this.state.width,\n        height: this.state.height,\n        onResize: this.onResize,\n        draggableOpts: this.props.draggableOpts\n      },\n      React.createElement(\n        'div',\n        _extends({ style: { width: this.state.width + 'px', height: this.state.height + 'px' } }, props),\n        this.props.children\n      )\n    );\n  }\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-resizable/build/ResizableBox.js\n ** module id = 18\n ** module chunks = 0\n **/","'use strict';\nmodule.exports = function() {\n  throw new Error(\"Don't instantiate Resizable directly! Use require('react-resizable').Resizable\");\n};\n\nmodule.exports.Resizable = require('./build/Resizable');\nmodule.exports.ResizableBox = require('./build/ResizableBox');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-resizable/index.js\n ** module id = 19\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule shallowEqual\n */\n\n'use strict';\n\n/**\n * Performs equality by iterating through keys on an object and returning\n * false when any key has values which are not strictly equal between\n * objA and objB. Returns true when the values of all keys are strictly equal.\n *\n * @return {boolean}\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n  var key;\n  // Test for A's keys different from B.\n  for (key in objA) {\n    if (objA.hasOwnProperty(key) &&\n        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n      return false;\n    }\n  }\n  // Test for B's keys missing from A.\n  for (key in objB) {\n    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = shallowEqual;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/shallowEqual.js\n ** module id = 20\n ** module chunks = 0\n **/"],"sourceRoot":""}